import os
import logging
import json
import asyncio
from datetime import datetime, timedelta
from dotenv import load_dotenv
import pytz
from typing import Optional
from telegram import Update, Document, PhotoSize, Video, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler, BaseHandler
)

from database import Database
from keyboards import Keyboards

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
IDLE = 0
REGISTRATION_FIRST_NAME, REGISTRATION_LAST_NAME, PARTICIPATION_TYPE = range(1, 4)
FAMILY_MEMBERS_COUNT, CHILDREN_INFO = range(4, 6)
SUPPORT_MESSAGE = 10
TASK_SUBMISSION = 20
# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
EDIT_FIRST_NAME, EDIT_LAST_NAME = range(30, 32)

class OfflineMessageHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ñ–ª–∞–π–Ω —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, db: Database):
        super().__init__(self.callback)
        self.db = db
    
    def check_update(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return bool(update.effective_user and (update.message or update.callback_query))
    
    async def callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω –µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        if not update.effective_user:
            return
        
        user_id = update.effective_user.id
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            message_type = 'unknown'
            message_data = {}
            
            if update.message:
                if update.message.text:
                    message_type = 'text'
                    message_data = {
                        'text': update.message.text,
                        'date': update.message.date.isoformat()
                    }
                elif update.message.photo:
                    message_type = 'photo'
                    message_data = {
                        'caption': update.message.caption,
                        'file_id': update.message.photo[-1].file_id,
                        'date': update.message.date.isoformat()
                    }
                elif update.message.video:
                    message_type = 'video'
                    message_data = {
                        'caption': update.message.caption,
                        'file_id': update.message.video.file_id,
                        'date': update.message.date.isoformat()
                    }
                elif update.message.document:
                    message_type = 'document'
                    message_data = {
                        'caption': update.message.caption,
                        'file_id': update.message.document.file_id,
                        'filename': update.message.document.file_name,
                        'date': update.message.date.isoformat()
                    }
                elif update.message.voice:
                    message_type = 'voice'
                    message_data = {
                        'file_id': update.message.voice.file_id,
                        'date': update.message.date.isoformat()
                    }
            
            elif update.callback_query:
                message_type = 'callback'
                message_data = {
                    'data': update.callback_query.data,
                    'date': datetime.now().isoformat()
                }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /start (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
            if message_type != 'unknown' and not (message_type == 'text' and 
                                                  message_data.get('text', '').startswith('/start')):
                
                # –ó–¥–µ—Å—å –º—ã –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω, –µ—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
                # –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: —Ç–∏–ø {message_type}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ OfflineMessageHandler: {e}")

class EcoBot:
    def __init__(self):
        self.db = Database()
        self.keyboards = Keyboards()
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤
        self.files_dir = "uploaded_files"
        os.makedirs(self.files_dir, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
        os.makedirs(os.path.join(self.files_dir, "photos"), exist_ok=True)
        os.makedirs(os.path.join(self.files_dir, "videos"), exist_ok=True)
        os.makedirs(os.path.join(self.files_dir, "documents"), exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self._init_test_data()
    
    def _should_show_july_21_message(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏ 21 –∏—é–ª—è"""
        moscow_tz = pytz.timezone('Europe/Moscow')
        now = datetime.now(moscow_tz)
        
        # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è: 21 –∏—é–ª—è 2025 –≤ 00:00 –ú–°–ö
        cutoff_date = moscow_tz.localize(datetime(2025, 7, 21, 0, 0, 0))
        
        return now < cutoff_date
    
    def _init_test_data(self):
        """–î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            tasks = self.db.get_all_tasks()
            if not tasks:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
                current_week = datetime.now(self.moscow_tz).isocalendar()[1]
                self.db.create_weekly_tasks(current_week)
                logger.info("–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.add_user(
            user_id,
            user.username,
            user.first_name,
            user.last_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ–ª–∞–π–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
        await self._process_offline_messages(update, context)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        saved_state, saved_context = self.db.get_user_state(user_id)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        if saved_state != IDLE and not self.db.is_user_registered(user_id):
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            for key, value in saved_context.items():
                context.user_data[key] = value
            
            await update.message.reply_text(
                "üîÑ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏**\n\n"
                "–Ø –ø–æ–º–Ω—é, –≥–¥–µ –º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –ø—Ä–µ—Ä–≤–∞–ª–∏—Å—å.",
                parse_mode='Markdown'
            )
            
            return await self._continue_from_state(update, context, saved_state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        if self.db.is_user_registered(user_id):
            user_data = self.db.get_user(user_id)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
            self.db.clear_user_state(user_id)
            
            welcome_text = (
                f"üåø –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_data[5]}!\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –≠–∫–æ-–±–æ—Ç –î–≤–∏–∂–µ–Ω–∏—è –¥—Ä—É–∑–µ–π –∑–∞–ø–æ–≤–µ–¥–Ω—ã—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤.\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏ 21 –∏—é–ª—è (–¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã)
            if self._should_show_july_21_message():
                welcome_text += (
                    "üéØ **–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø!**\n"
                    "üìÖ **–ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ 21 –∏—é–ª—è 2025 –≥–æ–¥–∞**\n\n"
                    "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ —É—á–∞—Å—Ç–∏—é!\n\n"
                )
            
            welcome_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=self.keyboards.main_menu()
            )
            return ConversationHandler.END
        else:
            # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            self.db.save_user_state(user_id, REGISTRATION_LAST_NAME)
            
            welcome_text = (
                f"üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≠–∫–æ-–±–æ—Ç –î–≤–∏–∂–µ–Ω–∏—è –¥—Ä—É–∑–µ–π –∑–∞–ø–æ–≤–µ–¥–Ω—ã—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤!\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏.\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏ 21 –∏—é–ª—è (–¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã)
            if self._should_show_july_21_message():
                welcome_text += (
                    "üéØ **–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø!**\n"
                    "üìÖ **–ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ 21 –∏—é–ª—è 2025 –≥–æ–¥–∞**\n\n"
                    "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º–∏ –∫ —É—á–∞—Å—Ç–∏—é!\n\n"
                )
            
            welcome_text += (
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                "üìù **–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:**"
            )
            
            await update.message.reply_text(welcome_text, parse_mode='Markdown')
            return REGISTRATION_LAST_NAME

    async def _continue_from_state(self, update: Update, context: ContextTypes.DEFAULT_TYPE, state: int):
        """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if state == REGISTRATION_LAST_NAME:
            await update.message.reply_text("üìù **–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:**", parse_mode='Markdown')
            return REGISTRATION_LAST_NAME
        
        elif state == REGISTRATION_FIRST_NAME:
            last_name = context.user_data.get('last_name', '')
            await update.message.reply_text(
                f"‚úÖ –§–∞–º–∏–ª–∏—è: {last_name}\n\nüìù **–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:**",
                parse_mode='Markdown'
            )
            return REGISTRATION_FIRST_NAME
        
        elif state == PARTICIPATION_TYPE:
            first_name = context.user_data.get('first_name', '')
            last_name = context.user_data.get('last_name', '')
            text = (
                f"‚úÖ –ò–º—è: {first_name}\n"
                f"‚úÖ –§–∞–º–∏–ª–∏—è: {last_name}\n\n"
                "üè† **–£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:**"
            )
            await update.message.reply_text(
                text,
                parse_mode='Markdown',
                reply_markup=self.keyboards.participation_type()
            )
            return PARTICIPATION_TYPE
        
        elif state == FAMILY_MEMBERS_COUNT:
            await update.message.reply_text(
                "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–°–µ–º–µ–π–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ**\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Ç –≤–∞—à–µ–π —Å–µ–º—å–∏:",
                parse_mode='Markdown',
                reply_markup=self.keyboards.back_to_menu()
            )
            return FAMILY_MEMBERS_COUNT
        
        elif state == CHILDREN_INFO:
            count = context.user_data.get('family_members_count', 1)
            await update.message.reply_text(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}\n\n"
                "üë∂ **–£—á–∞—Å—Ç–≤—É—é—Ç –ª–∏ –¥–µ—Ç–∏?**\n"
                "–ï—Å–ª–∏ –¥–∞, —É–∫–∞–∂–∏—Ç–µ –∏—Ö –≤–æ–∑—Ä–∞—Å—Ç. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':"
            )
            return CHILDREN_INFO
        
        
        elif state == TASK_SUBMISSION:
            task_id = current_context.get('selected_task_id')
            if task_id:
                context.user_data['selected_task_id'] = task_id
                await update.message.reply_text(
                    "üì§ **–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞**\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç—á–µ—Ç –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n"
                    "‚Ä¢ üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö\n"
                    "‚Ä¢ üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è\n"
                    "‚Ä¢ üé• –í–∏–¥–µ–æ\n"
                    "‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç\n\n"
                    "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–µ–¥–ª–∞–π–Ω - —Å—É–±–±–æ—Ç–∞ 23:59 –ú–°–ö",
                    parse_mode='Markdown'
                )
                return TASK_SUBMISSION
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç ID –∑–∞–¥–∞–Ω–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.db.clear_user_state(update.effective_user.id)
                return ConversationHandler.END
        
        elif state == EDIT_FIRST_NAME:
            await update.message.reply_text(
                "‚úèÔ∏è **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
                parse_mode='Markdown',
                reply_markup=self.keyboards.back_to_menu()
            )
            return EDIT_FIRST_NAME
        
        elif state == EDIT_LAST_NAME:
            await update.message.reply_text(
                "‚úèÔ∏è **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:",
                parse_mode='Markdown',
                reply_markup=self.keyboards.back_to_menu()
            )
            return EDIT_LAST_NAME
        
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            self.db.clear_user_state(update.effective_user.id)
            return ConversationHandler.END

    async def _process_offline_messages(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ"""
        user_id = update.effective_user.id
        offline_messages = self.db.get_offline_messages(user_id)
        
        if offline_messages:
            # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(offline_messages)} –æ—Ñ–ª–∞–π–Ω —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            processed_count = 0
            for msg_id, message_data, message_type, received_date in offline_messages:
                try:
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–ª–∞–π–Ω —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    try:
                        data = json.loads(message_data)
                        if message_type == 'text':
                            logger.info(f"–û—Ñ–ª–∞–π–Ω —Ç–µ–∫—Å—Ç: {data.get('text', '')}")
                        elif message_type in ['photo', 'video', 'document']:
                            logger.info(f"–û—Ñ–ª–∞–π–Ω {message_type}: {data.get('caption', '–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏')}")
                    except json.JSONDecodeError:
                        logger.info(f"–û—Ñ–ª–∞–π–Ω —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_data}")
                    
                    # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                    self.db.mark_offline_message_processed(msg_id)
                    processed_count += 1
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ñ–ª–∞–π–Ω —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
            
            # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if processed_count > 0:
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –æ—Ñ–ª–∞–π–Ω —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    async def registration_last_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏"""
        user_id = update.effective_user.id
        last_name = update.message.text.strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞
        try:
            input_data = json.dumps({
                'step': 'last_name',
                'input': last_name,
                'valid': len(last_name) >= 2,
                'date': update.message.date.isoformat()
            }, ensure_ascii=False)
            
            self.db.save_offline_message(user_id, input_data, 'registration_input')
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏: {e}")
        
        if not last_name or len(last_name) < 2:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –≤–≤–æ–¥–æ–º
            self.db.save_user_state(user_id, REGISTRATION_LAST_NAME, {
                'invalid_attempts': context.user_data.get('invalid_attempts', 0) + 1,
                'last_invalid_input': last_name,
                'timestamp': update.message.date.isoformat()
            })
            
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):\n\n"
                "üíæ –í–∞—à –≤–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
            )
            return REGISTRATION_LAST_NAME
        
        context.user_data['last_name'] = last_name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self.db.save_user_state(
            user_id, 
            REGISTRATION_FIRST_NAME, 
            {
                **context.user_data,
                'last_name_confirmed': True,
                'timestamp': update.message.date.isoformat()
            }
        )
        
        await update.message.reply_text(
            f"‚úÖ –§–∞–º–∏–ª–∏—è: {last_name}\n\nüìù **–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:**\n\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
            parse_mode='Markdown'
        )
        return REGISTRATION_FIRST_NAME

    async def registration_first_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
        user_id = update.effective_user.id
        first_name = update.message.text.strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞
        try:
            input_data = json.dumps({
                'step': 'first_name',
                'input': first_name,
                'valid': len(first_name) >= 2,
                'current_data': context.user_data,
                'date': update.message.date.isoformat()
            }, ensure_ascii=False)
            
            self.db.save_offline_message(user_id, input_data, 'registration_input')
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏: {e}")
        
        if not first_name or len(first_name) < 2:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –≤–≤–æ–¥–æ–º
            self.db.save_user_state(user_id, REGISTRATION_FIRST_NAME, {
                **context.user_data,
                'invalid_attempts': context.user_data.get('invalid_attempts', 0) + 1,
                'last_invalid_input': first_name,
                'timestamp': update.message.date.isoformat()
            })
            
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):\n\n"
                "üíæ –í–∞—à –≤–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
            )
            return REGISTRATION_FIRST_NAME
        
        context.user_data['first_name'] = first_name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self.db.save_user_state(
            user_id, 
            PARTICIPATION_TYPE, 
            {
                **context.user_data,
                'first_name_confirmed': True,
                'timestamp': update.message.date.isoformat()
            }
        )
        
        text = (
            f"‚úÖ –ò–º—è: {first_name}\n"
            f"‚úÖ –§–∞–º–∏–ª–∏—è: {context.user_data['last_name']}\n\n"
            "üè† **–£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:**\n\n"
            "üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
        )
        
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=self.keyboards.participation_type()
        )
        return PARTICIPATION_TYPE

    async def participation_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—á–∞—Å—Ç–∏—è"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        try:
            choice_data = json.dumps({
                'step': 'participation_type',
                'choice': text,
                'current_data': context.user_data,
                'date': update.message.date.isoformat()
            }, ensure_ascii=False)
            
            self.db.save_offline_message(user_id, choice_data, 'registration_choice')
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —É—á–∞—Å—Ç–∏—è: {e}")
        
        if text == "üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ":
            context.user_data['participation_type'] = 'individual'
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
            self.db.save_user_state(user_id, IDLE, {
                **context.user_data,
                'participation_confirmed': True,
                'ready_for_completion': True,
                'timestamp': update.message.date.isoformat()
            })
            
            await self._complete_registration(update, context)
            return ConversationHandler.END
            
        elif text == "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å–µ–π":
            context.user_data['participation_type'] = 'family'
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è
            self.db.save_user_state(
                user_id, 
                FAMILY_MEMBERS_COUNT, 
                {
                    **context.user_data,
                    'participation_confirmed': True,
                    'timestamp': update.message.date.isoformat()
                }
            )
            
            await update.message.reply_text(
                "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–°–µ–º–µ–π–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ**\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Ç –≤–∞—à–µ–π —Å–µ–º—å–∏:\n\n"
                "üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                parse_mode='Markdown',
                reply_markup=self.keyboards.back_to_menu()
            )
            return FAMILY_MEMBERS_COUNT
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä
            self.db.save_user_state(user_id, PARTICIPATION_TYPE, {
                **context.user_data,
                'invalid_choice': text,
                'invalid_attempts': context.user_data.get('invalid_attempts', 0) + 1,
                'timestamp': update.message.date.isoformat()
            })
            
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n"
                "üíæ –í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
                reply_markup=self.keyboards.participation_type()
            )
            return PARTICIPATION_TYPE

    async def family_members_count(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ–º—å–∏"""
        user_id = update.effective_user.id
        count_input = update.message.text.strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥
        try:
            input_data = json.dumps({
                'step': 'family_members_count',
                'input': count_input,
                'current_data': context.user_data,
                'date': update.message.date.isoformat()
            }, ensure_ascii=False)
            
            self.db.save_offline_message(user_id, input_data, 'registration_input')
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        
        try:
            count = int(count_input)
            if count < 1 or count > 10:
                raise ValueError()
        except ValueError:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –≤–≤–æ–¥–æ–º
            self.db.save_user_state(user_id, FAMILY_MEMBERS_COUNT, {
                **context.user_data,
                'invalid_count_input': count_input,
                'invalid_attempts': context.user_data.get('invalid_attempts', 0) + 1,
                'timestamp': update.message.date.isoformat()
            })
            
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:\n\n"
                "üíæ –í–∞—à –≤–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
            )
            return FAMILY_MEMBERS_COUNT
        
        context.user_data['family_members_count'] = count
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self.db.save_user_state(
            user_id, 
            CHILDREN_INFO, 
            {
                **context.user_data,
                'family_count_confirmed': True,
                'timestamp': update.message.date.isoformat()
            }
        )
        
        await update.message.reply_text(
            f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}\n\n"
            "üë∂ **–£—á–∞—Å—Ç–≤—É—é—Ç –ª–∏ –¥–µ—Ç–∏?**\n"
            "–ï—Å–ª–∏ –¥–∞, —É–∫–∞–∂–∏—Ç–µ –∏—Ö –≤–æ–∑—Ä–∞—Å—Ç. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':\n\n"
            "üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
        )
        return CHILDREN_INFO

    async def children_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ—Ç—è—Ö"""
        user_id = update.effective_user.id
        children_info = update.message.text.strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥
        try:
            input_data = json.dumps({
                'step': 'children_info',
                'input': children_info,
                'current_data': context.user_data,
                'date': update.message.date.isoformat()
            }, ensure_ascii=False)
            
            self.db.save_offline_message(user_id, input_data, 'registration_input')
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç—è—Ö: {e}")
        
        context.user_data['children_info'] = children_info if children_info.lower() != '–Ω–µ—Ç' else None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        self.db.save_user_state(user_id, IDLE, {
            **context.user_data,
            'children_info_confirmed': True,
            'ready_for_completion': True,
            'timestamp': update.message.date.isoformat()
        })
        
        await self._complete_registration(update, context)
        return ConversationHandler.END

    async def _complete_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        self.db.update_user_registration(
            user_id,
            context.user_data['first_name'],
            context.user_data['last_name'],
            context.user_data['participation_type'],
            context.user_data.get('family_members_count', 1),
            context.user_data.get('children_info')
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        self.db.clear_user_state(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if context.user_data['participation_type'] == 'individual':
            participation_text = "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ"
        else:
            count = context.user_data.get('family_members_count', 1)
            children = context.user_data.get('children_info')
            participation_text = f"—Å–µ–º—å–µ–π ({count} —á–µ–ª.)"
            if children:
                participation_text += f", —Å –¥–µ—Ç—å–º–∏: {children}"
        
        congratulations_text = (
            f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!**\n\n"
            f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {context.user_data['first_name']} {context.user_data['last_name']}\n"
            f"üè† –¢–∏–ø —É—á–∞—Å—Ç–∏—è: {participation_text}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏ 21 –∏—é–ª—è (–¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã)
        if self._should_show_july_21_message():
            congratulations_text += (
                "üéØ **–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø!**\n"
                "üìÖ **–ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ 21 –∏—é–ª—è 2025 –≥–æ–¥–∞**\n\n"
                "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —É—á–∞—Å—Ç–∏—é!\n\n"
            )
        
        congratulations_text += (
            "üìù **–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:**\n"
            "‚Ä¢ –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç –≤–∞—Å –∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
            "‚Ä¢ –í —Å–ª—É—á–∞–µ —Å–µ–º–µ–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫\n"
            "‚Ä¢ –ó–∞–¥–∞–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –∏ —á–µ—Ç–≤–µ—Ä–≥–∞–º –≤ 11:00 –ú–°–ö\n"
            "‚Ä¢ –î–µ–¥–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - —Å—É–±–±–æ—Ç–∞ 23:59 –ú–°–ö\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞! üåø"
        )
        
        await update.message.reply_text(
            congratulations_text,
            parse_mode='Markdown',
            reply_markup=self.keyboards.main_menu()
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if not self.db.is_user_registered(user_id):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            try:
                message_data = json.dumps({
                    'text': update.message.text,
                    'date': update.message.date.isoformat(),
                    'context': 'unregistered_user'
                }, ensure_ascii=False)
                
                self.db.save_offline_message(user_id, message_data, 'text_unregistered')
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n\n"
                "üíæ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=self.keyboards.main_menu()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            message_data = json.dumps({
                'text': update.message.text,
                'date': update.message.date.isoformat(),
                'context': 'main_menu'
            }, ensure_ascii=False)
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –ø–æ—Ç–æ–º —É–¥–∞–ª–∏–º –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            temp_msg_id = None
            self.db.save_offline_message(user_id, message_data, 'text_processing')
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            temp_messages = self.db.get_offline_messages(user_id)
            if temp_messages:
                temp_msg_id = temp_messages[-1][0]
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            temp_msg_id = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
        saved_state, saved_context = self.db.get_user_state(user_id)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        if saved_state == EDIT_FIRST_NAME:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            for key, value in saved_context.items():
                context.user_data[key] = value
            
            return await self.handle_edit_first_name(update, context)
        
        elif saved_state == EDIT_LAST_NAME:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            for key, value in saved_context.items():
                context.user_data[key] = value
            
            return await self.handle_edit_last_name(update, context)
        
        elif saved_state == TASK_SUBMISSION:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            for key, value in saved_context.items():
                context.user_data[key] = value
            
            return await self.handle_task_submission_content(update, context)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        text = update.message.text
        
        try:
            if text == "üìã –ü–æ–ª–æ–∂–µ–Ω–∏–µ –æ–± –∏–≥—Ä–µ":
                self.db.clear_user_state(user_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self._send_game_rules(update)
            
            elif text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é":
                self.db.clear_user_state(user_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self._send_instructions(update)
            
            elif text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É":
                self.db.clear_user_state(user_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self._send_task_submission(update, context)
            
            elif text == "üè¶ –ë–∞–Ω–∫ –∑–∞–¥–∞–Ω–∏–π":
                self.db.clear_user_state(user_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self._send_tasks_bank(update)
            
            elif text == "üìä –ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç":
                self.db.clear_user_state(user_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self._send_user_results(update, user_id)
            
            elif text == "üë§ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
                self.db.clear_user_state(user_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self._show_profile_edit(update)
            
            elif text == "üåø –û –î–≤–∏–∂–µ–Ω–∏–∏ –¥—Ä—É–∑–µ–π –∑–∞–ø–æ–≤–µ–¥–Ω—ã—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤":
                self.db.clear_user_state(user_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self._send_about_movement(update)
            
            elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                self.db.clear_user_state(user_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self._send_main_menu(update)
            
            elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
                # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —ç—Ç–æ –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await self._start_edit_first_name(update, context)
            
            elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é":
                # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —ç—Ç–æ –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await self._start_edit_last_name(update, context)
            
            elif text == "üÜò –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É":
                self.db.clear_user_state(user_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self._start_support_request(update, context)
            
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                unknown_data = json.dumps({
                    'text': text,
                    'date': update.message.date.isoformat(),
                    'context': 'unknown_command'
                }, ensure_ascii=False)
                
                self.db.save_offline_message(user_id, unknown_data, 'text_unknown')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ö–æ–∂–µ –ª–∏ —ç—Ç–æ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
                if len(text) > 10:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –æ—Ç—á–µ—Ç
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    potential_report_data = json.dumps({
                        'user_id': user_id,
                        'content': text,
                        'type': 'text',
                        'date': update.message.date.isoformat(),
                        'context': 'potential_report_out_of_context'
                    }, ensure_ascii=False)
                    
                    self.db.save_offline_message(user_id, potential_report_data, 'potential_report')
                    logger.info(f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    
                    warning_text = (
                        "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –ù–ï –ü–†–ò–ù–Ø–¢–û!**\n\n"
                        "–ü–æ—Ö–æ–∂–µ, –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞–Ω–∏—é, –Ω–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "
                        "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ **–ù–ï –ë–£–î–ï–¢ –ó–ê–°–ß–ò–¢–ê–ù–û**.\n\n"
                        "üîπ **–î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π:**\n"
                        "1Ô∏è‚É£ –ò–∑—É—á–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é\n"
                        "2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'\n"
                        "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞\n"
                        "4Ô∏è‚É£ –¢–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–π –æ—Ç—á–µ—Ç\n\n"
                        "üíæ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                        "**–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å?**"
                    )
                    keyboard = self.keyboards.out_of_context_actions()
                else:
                    warning_text = (
                        "‚ùì **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞**\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.\n\n"
                        "üíæ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
                        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**"
                    )
                    keyboard = self.keyboards.out_of_context_actions()
                
                await update.message.reply_text(
                    warning_text,
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
            
            # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if temp_msg_id:
                self.db.mark_offline_message_processed(temp_msg_id)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ù–µ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            # –ù–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
                "üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
                reply_markup=self.keyboards.main_menu()
            )

    async def _send_game_rules(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–± –∏–≥—Ä–µ (PDF —Ñ–∞–π–ª)"""
        text = (
            "üìã **–ü–æ–ª–æ–∂–µ–Ω–∏–µ –æ–± –∏–≥—Ä–µ**\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, PDF —Ñ–∞–π–ª —Å –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. "
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n\n"
            "**–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:**\n"
            "‚Ä¢ –ó–∞–¥–∞–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –¥–≤–∞–∂–¥—ã –≤ –Ω–µ–¥–µ–ª—é: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥ –≤ 11:00 –ú–°–ö\n"
            "‚Ä¢ –î–µ–¥–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: —Å—É–±–±–æ—Ç–∞ 23:59 –ú–°–ö\n"
            "‚Ä¢ –û—Ç—á–µ—Ç—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ—Å—Ç—ã, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ\n"
            "‚Ä¢ –û–ø–æ–∑–¥–∞–≤—à–∏–µ –æ—Ç—á–µ—Ç—ã –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è\n"
            "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã\n"
            "‚Ä¢ –í —Å–µ–º–µ–π–Ω–æ–º —É—á–∞—Å—Ç–∏–∏ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫"
        )
        await update.message.reply_text(
            text, 
            parse_mode='Markdown',
            reply_markup=self.keyboards.main_menu()  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        )

    async def _send_instructions(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é"""
        current_time = datetime.now(self.moscow_tz)
        weekday = current_time.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if weekday < 1:  # –î–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
            next_publication = "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 11:00 –ú–°–ö"
        elif weekday < 3:  # –ú–µ–∂–¥—É –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–æ–º –∏ —á–µ—Ç–≤–µ—Ä–≥–æ–º
            next_publication = "—á–µ—Ç–≤–µ—Ä–≥ –≤ 11:00 –ú–°–ö"
        elif weekday < 5:  # –ú–µ–∂–¥—É —á–µ—Ç–≤–µ—Ä–≥–æ–º –∏ —Å—É–±–±–æ—Ç–æ–π
            next_publication = "—Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 11:00 –ú–°–ö"
        else:  # –í—ã—Ö–æ–¥–Ω—ã–µ
            next_publication = "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 11:00 –ú–°–ö"
        
        text = (
            "üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é**\n\n"
            "**–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π:**\n"
            "üïê –ü—É–±–ª–∏–∫–∞—Ü–∏—è: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥ –≤ 11:00 –ú–°–ö\n"
            "‚è∞ –î–µ–¥–ª–∞–π–Ω: —Å—É–±–±–æ—Ç–∞ –≤ 23:59 –ú–°–ö\n"
            f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {next_publication}\n\n"
            "**–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:**\n"
            "1Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π\n"
            "2Ô∏è‚É£ –ò–∑—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ë–∞–Ω–∫ –∑–∞–¥–∞–Ω–∏–π'\n"
            "3Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n"
            "4Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –æ—Ç—á–µ—Ç:\n"
            "   ‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\n"
            "   ‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
            "   ‚Ä¢ –í–∏–¥–µ–æ\n"
            "5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç –¥–æ —Å—É–±–±–æ—Ç—ã 23:59 –ú–°–ö\n"
            "6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n\n"
            "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –û–ø–æ–∑–¥–∞–≤—à–∏–µ –æ—Ç—á–µ—Ç—ã –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è, –Ω–æ –º—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∏–º!"
        )
        await update.message.reply_text(
            text, 
            parse_mode='Markdown',
            reply_markup=self.keyboards.main_menu()  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        )

    async def _send_task_submission(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ)"""
        user_id = update.effective_user.id
        open_tasks = self.db.get_open_tasks()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç—á–µ—Ç—ã
        submitted_task_ids = set()
        try:
            user_submissions = self.db.get_user_submissions(user_id)
            for submission in user_submissions:
                # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                for task in open_tasks:
                    if task[1] == submission[0]:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                        submitted_task_ids.add(task[0])
                        break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {e}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
        available_tasks = [task for task in open_tasks if task[0] not in submitted_task_ids]
        
        if not available_tasks:
            text = (
                "üì§ **–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤**\n\n"
                f"üü¢ –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {len(open_tasks)}\n"
                f"‚úÖ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç—ã –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º!\n\n"
            )
            
            if len(open_tasks) == 0:
                text += (
                    "üö´ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.\n"
                    "–ó–∞–¥–∞–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –∏ —á–µ—Ç–≤–µ—Ä–≥–∞–º –≤ 11:00 –ú–°–ö."
                )
            else:
                text += (
                    "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª '–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç' –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n"
                    "–ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –∏ —á–µ—Ç–≤–µ—Ä–≥–∞–º –≤ 11:00 –ú–°–ö."
                )
            
            await update.message.reply_text(
                text,
                parse_mode='Markdown',
                reply_markup=self.keyboards.main_menu()
            )
            return
        
        text = (
            "üì§ **–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤**\n\n"
            f"üü¢ –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {len(open_tasks)}\n"
            f"üìù –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(available_tasks)}\n"
            f"‚úÖ –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(submitted_task_ids)}\n\n"
            "**–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:**"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
        keyboard = []
        
        for task_data in available_tasks:
            task_id, title, description, _ = task_data[:4]
            # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ  
            short_title = title[:40] + "..." if len(title) > 40 else title
            keyboard.append([InlineKeyboardButton(
                f"üìù {short_title}", 
                callback_data=f"submit_task_{task_id}"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _send_tasks_bank(self, update: Update):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–Ω–∫ –∑–∞–¥–∞–Ω–∏–π - —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
        all_tasks = self.db.get_all_tasks()
        open_tasks = [task for task in all_tasks if task[4]]  # is_open = True
        
        current_week_tasks = self.db.get_current_week_tasks()
        
        if not open_tasks:
            text = (
                "üè¶ **–ë–∞–Ω–∫ –∑–∞–¥–∞–Ω–∏–π**\n\n"
                f"üìÖ –ó–∞–¥–∞–Ω–∏—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏: {len(current_week_tasks)}\n"
                f"üü¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π: 0\n\n"
                "üö´ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n"
                "–ó–∞–¥–∞–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –∏ —á–µ—Ç–≤–µ—Ä–≥–∞–º –≤ 11:00 –ú–°–ö."
            )
            
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            
            await update.message.reply_text(
                text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        text = (
            "üè¶ **–ë–∞–Ω–∫ –∑–∞–¥–∞–Ω–∏–π**\n\n"
            f"üìÖ –ó–∞–¥–∞–Ω–∏—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏: {len(current_week_tasks)}\n"
            f"üü¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {len(open_tasks)}\n\n"
            "**üü¢ –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è:**\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—é:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
        for task_data in open_tasks:
            task_id, title, description, link = task_data[:4]
            if link:
                # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                short_title = title[:40] + "..." if len(title) > 40 else title
                keyboard.append([InlineKeyboardButton(
                    f"üü¢ {short_title}", 
                    url=link
                )])
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _send_user_results(self, update: Update, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        completed, total_open = self.db.get_user_stats(user_id)
        submissions = self.db.get_user_submissions(user_id)
        
        text = f"üìä **–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç**\n\n"
        text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed} –∏–∑ {total_open}\n\n"
        
        if submissions:
            text += "**–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–æ–∫:**\n\n"
            for title, submission_date, status, is_on_time in submissions:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                date_obj = datetime.fromisoformat(submission_date.replace('Z', '+00:00'))
                formatted_date = date_obj.strftime("%d.%m.%Y –≤ %H:%M –º—Å–∫")
                
                if is_on_time:
                    time_status = "‚úÖ –í —Å—Ä–æ–∫"
                else:
                    time_status = "‚è∞ –° –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º"
                
                status_emoji = {
                    'pending': '‚è≥',
                    'approved': '‚úÖ',
                    'rejected': '‚ùå'
                }.get(status, '‚è≥')
                
                text += f"{status_emoji} **{title}**\n"
                text += f"   üìÖ {formatted_date}\n"
                text += f"   {time_status}\n\n"
        else:
            text += "üìù –í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É."
        
        await update.message.reply_text(
            text, 
            parse_mode='Markdown',
            reply_markup=self.keyboards.main_menu()  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        )

    async def _send_about_movement(self, update: Update):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –î–≤–∏–∂–µ–Ω–∏–∏"""
        text = (
            "üåø **–û –î–≤–∏–∂–µ–Ω–∏–∏ –¥—Ä—É–∑–µ–π –∑–∞–ø–æ–≤–µ–¥–Ω—ã—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤**\n\n"
            "–î–≤–∏–∂–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π –∑–∞–ø–æ–≤–µ–¥–Ω—ã—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤ ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ª—é–¥–µ–π, "
            "–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –æ–±—â–µ–π —Ü–µ–ª—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏—Ä–æ–¥—ã –∏ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è.\n\n"
            "**–ù–∞—à–∏ —Ü–µ–ª–∏:**\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è\n"
            "‚Ä¢ –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ —ç–∫–æ—Ç—É—Ä–∏–∑–º–∞\n"
            "‚Ä¢ –ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n\n"
            "üåê –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ: https://dzo.wildnet.ru"
        )
        
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            disable_web_page_preview=False,
            reply_markup=self.keyboards.main_menu()  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        )

    async def _start_support_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
        text = (
            "üÜò **–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É**\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
            "üë®‚Äçüíª @Danlocked\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å:\n"
            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏\n"
            "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏ —É—á–∞—Å—Ç–∏–µ–º\n"
            "‚Ä¢ –õ—é–±—ã–º–∏ –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"
        )
        
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=self.keyboards.main_menu()
        )

    async def _send_main_menu(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.db.clear_user_state(update.effective_user.id)
        
        text = "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=self.keyboards.main_menu()  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        )

    async def _show_profile_edit(self, update: Update):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        user_data = self.db.get_user(user_id)
        
        if not user_data:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=self.keyboards.main_menu()
            )
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        _, _, _, _, first_name, last_name, participation_type, family_members_count, children_info, registration_completed, _ = user_data
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —É—á–∞—Å—Ç–∏—è
        if participation_type == 'individual':
            participation_text = "üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ"
        else:
            participation_text = f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å–µ–π ({family_members_count} —á–µ–ª.)"
            if children_info:
                participation_text += f", –¥–µ—Ç–∏: {children_info}"
        
        text = (
            f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            f"**–ò–º—è:** {first_name}\n"
            f"**–§–∞–º–∏–ª–∏—è:** {last_name}\n"
            f"**–¢–∏–ø —É—á–∞—Å—Ç–∏—è:** {participation_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )
        
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=self.keyboards.profile_edit()
        )

    async def _start_edit_first_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏"""
        user_id = update.effective_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.db.save_user_state(user_id, EDIT_FIRST_NAME)
        
        await update.message.reply_text(
            "‚úèÔ∏è **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
            parse_mode='Markdown',
            reply_markup=self.keyboards.back_to_menu()
        )
        
        return EDIT_FIRST_NAME

    async def _start_edit_last_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏"""
        user_id = update.effective_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.db.save_user_state(user_id, EDIT_LAST_NAME)
        
        await update.message.reply_text(
            "‚úèÔ∏è **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:",
            parse_mode='Markdown',
            reply_markup=self.keyboards.back_to_menu()
        )
        
        return EDIT_LAST_NAME

    async def handle_edit_first_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏"""
        user_id = update.effective_user.id
        new_first_name = update.message.text.strip()
        
        if update.message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.db.clear_user_state(user_id)
            await self._send_main_menu(update)
            return ConversationHandler.END
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not new_first_name or len(new_first_name) < 2:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):",
                reply_markup=self.keyboards.back_to_menu()
            )
            return EDIT_FIRST_NAME
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            user_data = self.db.get_user(user_id)
            if user_data:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è
                self.db.update_user_name(user_id, new_first_name, user_data[5])  # 5 - last_name
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.db.clear_user_state(user_id)
                
                await update.message.reply_text(
                    f"‚úÖ **–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!**\n\n"
                    f"–ù–æ–≤–æ–µ –∏–º—è: **{new_first_name}**",
                    parse_mode='Markdown',
                    reply_markup=self.keyboards.main_menu()
                )
                
                return ConversationHandler.END
            else:
                raise Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self.keyboards.main_menu()
            )
            return ConversationHandler.END

    async def handle_edit_last_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏"""
        user_id = update.effective_user.id
        new_last_name = update.message.text.strip()
        
        if update.message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.db.clear_user_state(user_id)
            await self._send_main_menu(update)
            return ConversationHandler.END
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not new_last_name or len(new_last_name) < 2:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):",
                reply_markup=self.keyboards.back_to_menu()
            )
            return EDIT_LAST_NAME
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–º–∏–ª–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            user_data = self.db.get_user(user_id)
            if user_data:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é
                self.db.update_user_name(user_id, user_data[4], new_last_name)  # 4 - first_name
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.db.clear_user_state(user_id)
                
                await update.message.reply_text(
                    f"‚úÖ **–§–∞–º–∏–ª–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!**\n\n"
                    f"–ù–æ–≤–∞—è —Ñ–∞–º–∏–ª–∏—è: **{new_last_name}**",
                    parse_mode='Markdown',
                    reply_markup=self.keyboards.main_menu()
                )
                
                return ConversationHandler.END
            else:
                raise Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–º–∏–ª–∏–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self.keyboards.main_menu()
            )
            return ConversationHandler.END

    async def handle_task_submission_content(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—é"""
        user_id = update.effective_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        current_state, current_context = self.db.get_user_state(user_id)
        
        if 'selected_task_id' not in context.user_data:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –µ—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å
            if 'selected_task_id' in current_context:
                context.user_data['selected_task_id'] = current_context['selected_task_id']
                logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω task_id –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {current_context['selected_task_id']}")
            else:
                await update.message.reply_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞.\n\n"
                    "üíæ –í–∞—à –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞–Ω–∏—è.",
                    reply_markup=self.keyboards.main_menu()
                )
                return ConversationHandler.END
        
        task_id = context.user_data['selected_task_id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self.db.save_user_state(user_id, TASK_SUBMISSION, {
            'selected_task_id': task_id,
            'submission_attempt': datetime.now().isoformat()
        })
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        file_path = None
        
        if update.message.text:
            submission_type = 'text'
            content = update.message.text
            file_id = None
        elif update.message.photo:
            submission_type = 'photo'
            content = update.message.caption or "–§–æ—Ç–æ-–æ—Ç—á–µ—Ç"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            file_path = await self._download_and_save_file(photo, "photo", user_id, context, task_id)
            file_id = photo.file_id  # –û—Å—Ç–∞–≤–ª—è–µ–º file_id –∫–∞–∫ fallback
            
        elif update.message.video:
            submission_type = 'video'
            content = update.message.caption or "–í–∏–¥–µ–æ-–æ—Ç—á–µ—Ç"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ
            video = update.message.video
            file_path = await self._download_and_save_file(video, "video", user_id, context, task_id)
            file_id = video.file_id  # –û—Å—Ç–∞–≤–ª—è–µ–º file_id –∫–∞–∫ fallback
            
        elif update.message.document:
            submission_type = 'document'
            content = update.message.caption or f"–î–æ–∫—É–º–µ–Ω—Ç: {update.message.document.file_name}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ª–æ–∫–∞–ª—å–Ω–æ
            document = update.message.document
            file_path = await self._download_and_save_file(document, "document", user_id, context, task_id)
            file_id = document.file_id  # –û—Å—Ç–∞–≤–ª—è–µ–º file_id –∫–∞–∫ fallback
            
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n\n"
                "üíæ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.",
                reply_markup=self.keyboards.main_menu()
            )
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏  
        try:
            if submission_type == 'text':
                submission_data = json.dumps({
                    'type': 'text',
                    'content': content,
                    'task_id': task_id,
                    'date': update.message.date.isoformat()
                }, ensure_ascii=False)
            else:
                submission_data = json.dumps({
                    'type': submission_type,
                    'content': content,
                    'file_id': file_id,
                    'file_path': file_path,  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    'task_id': task_id,
                    'date': update.message.date.isoformat()
                }, ensure_ascii=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            self.db.save_offline_message(user_id, submission_data, f'submission_{submission_type}')
            logger.info(f"–û—Ç—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω
        try:
            # –ü–µ—Ä–µ–¥–∞–µ–º file_path –≤–º–µ—Å—Ç–æ file_id –≤ –º–µ—Ç–æ–¥ submit_task
            is_on_time = self.db.submit_task(user_id, task_id, submission_type, content, file_id, file_path)
            
            if is_on_time:
                response_text = (
                    "‚úÖ **–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!**\n\n"
                    "–í–∞—à –æ—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç –≤ —Å—Ä–æ–∫ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üåø"
                )
            else:
                response_text = (
                    "‚è∞ **–û—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º**\n\n"
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–µ–¥–ª–∞–π–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–µ–ª (—Å—É–±–±–æ—Ç–∞ 23:59 –ú–°–ö), "
                    "–ø–æ—ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω–æ.\n\n"
                    "üåü **–ù–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å!** –í–∞—à–µ —É—á–∞—Å—Ç–∏–µ —Ü–µ–Ω–Ω–æ, –∏ –º—ã –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –≤–∫–ª–∞–¥ –≤ –∑–∞—â–∏—Ç—É –ø—Ä–∏—Ä–æ–¥—ã. "
                    "–°–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥ –≤ 11:00 –ú–°–ö.\n\n"
                    "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –ø–ª–∞–Ω–µ—Ç–µ! üåøüíö"
                )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.db.clear_user_state(user_id)
            
            await update.message.reply_text(
                response_text,
                parse_mode='Markdown',
                reply_markup=self.keyboards.main_menu()
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
            logger.info(f"–û—Ç—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∑–∞–¥–∞–Ω–∏—é {task_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏
            error_data = json.dumps({
                'task_id': task_id,
                'submission_type': submission_type,
                'content': content[:100] if content else None,  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                'file_id': file_id,
                'file_path': file_path,  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                'error': str(e),
                'date': datetime.now().isoformat()
            }, ensure_ascii=False)
            
            self.db.save_offline_message(user_id, error_data, 'submission_error')
            
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.\n\n"
                "üíæ –í–∞—à –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤—Ä—É—á–Ω—É—é.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.",
                reply_markup=self.keyboards.main_menu()
            )
            
            return ConversationHandler.END

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏)"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        data = query.data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if not self.db.is_user_registered(user_id):
            await query.edit_message_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            return
        
        try:
            if data == "main_menu":
                await self._show_main_menu_callback(query)
            
            elif data == "tasks_bank":
                await self._show_tasks_bank_callback(query)
            
            elif data.startswith("submit_task_"):
                task_id = int(data.split("_")[-1])
                await self._start_task_submission(query, context, task_id)
            
            elif data == "submit_tasks":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                await self._show_task_submission_callback(query, context)
            
            elif data == "support":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
                await self._show_support_callback(query)
            
            elif data == "instructions":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                await self._show_instructions_callback(query)
            
            else:
                await query.edit_message_text(
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                    ]])
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
            await query.edit_message_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )

    async def _show_main_menu_callback(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.db.clear_user_state(query.from_user.id)
        
        await query.edit_message_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            parse_mode='Markdown'
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await query.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=self.keyboards.main_menu()
        )

    async def _show_tasks_bank_callback(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–Ω–∫ –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ callback - —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
        all_tasks = self.db.get_all_tasks()
        open_tasks = [task for task in all_tasks if task[4]]  # is_open = True
        
        current_week_tasks = self.db.get_current_week_tasks()
        
        if not open_tasks:
            text = (
                "üè¶ **–ë–∞–Ω–∫ –∑–∞–¥–∞–Ω–∏–π**\n\n"
                f"üìÖ –ó–∞–¥–∞–Ω–∏—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏: {len(current_week_tasks)}\n"
                f"üü¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π: 0\n\n"
                "üö´ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n"
                "–ó–∞–¥–∞–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –∏ —á–µ—Ç–≤–µ—Ä–≥–∞–º –≤ 11:00 –ú–°–ö."
            )
            
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            
            await query.edit_message_text(
                text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        text = (
            "üè¶ **–ë–∞–Ω–∫ –∑–∞–¥–∞–Ω–∏–π**\n\n"
            f"üìÖ –ó–∞–¥–∞–Ω–∏—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏: {len(current_week_tasks)}\n"
            f"üü¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {len(open_tasks)}\n\n"
            "**üü¢ –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è:**\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—é:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
        for task_data in open_tasks:
            task_id, title, description, link = task_data[:4]
            if link:
                # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                short_title = title[:40] + "..." if len(title) > 40 else title
                keyboard.append([InlineKeyboardButton(
                    f"üü¢ {short_title}", 
                    url=link
                )])
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_archived_tasks_callback(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ callback"""
        all_tasks = self.db.get_all_tasks()
        archived_tasks = [task for task in all_tasks if not task[4]]  # is_open = False
        
        if not archived_tasks:
            await query.edit_message_text(
                "üìÅ **–ê—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è**\n\n"
                "–ê—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –±–∞–Ω–∫—É –∑–∞–¥–∞–Ω–∏–π", callback_data="tasks_bank"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            return
        
        text = (
            f"üìÅ **–ê—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è** ({len(archived_tasks)})\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—é:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
        for task_data in archived_tasks:
            task_id, title, description, link = task_data[:4]
            if link:
                # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                short_title = title[:40] + "..." if len(title) > 40 else title
                keyboard.append([InlineKeyboardButton(
                    f"üìÅ {short_title}", 
                    url=link
                )])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –±–∞–Ω–∫—É –∑–∞–¥–∞–Ω–∏–π", callback_data="tasks_bank")])
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _start_task_submission(self, query, context, task_id):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è"""
        context.user_data['selected_task_id'] = task_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è
        self.db.save_user_state(
            query.from_user.id, 
            TASK_SUBMISSION, 
            context.user_data
        )
        
        await query.edit_message_text(
            "üì§ **–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç—á–µ—Ç –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n"
            "‚Ä¢ üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö\n"
            "‚Ä¢ üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è\n"
            "‚Ä¢ üé• –í–∏–¥–µ–æ\n"
            "‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç\n\n"
            "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–µ–¥–ª–∞–π–Ω - —Å—É–±–±–æ—Ç–∞ 23:59 –ú–°–ö",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        
        return TASK_SUBMISSION

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update {update}: {context.error}")
        
        # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω
        if update and update.effective_user:
            try:
                message_data = {}
                message_type = 'error'
                
                if update.message:
                    if update.message.text:
                        message_data = {
                            'text': update.message.text,
                            'error': str(context.error),
                            'date': update.message.date.isoformat()
                        }
                        message_type = 'text_error'
                    elif update.message.photo:
                        message_data = {
                            'caption': update.message.caption,
                            'file_id': update.message.photo[-1].file_id,
                            'error': str(context.error),
                            'date': update.message.date.isoformat()
                        }
                        message_type = 'photo_error'
                    elif update.message.video:
                        message_data = {
                            'caption': update.message.caption,
                            'file_id': update.message.video.file_id,
                            'error': str(context.error),
                            'date': update.message.date.isoformat()
                        }
                        message_type = 'video_error'
                
                self.db.save_offline_message(
                    update.effective_user.id,
                    json.dumps(message_data, ensure_ascii=False),
                    message_type
                )
                
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {context.error}")
                
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω: {e}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            if update and update.effective_message:
                await update.effective_message.reply_text(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
                    "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.",
                    reply_markup=self.keyboards.main_menu()
                )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    async def _show_task_submission_callback(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ callback"""
        user_id = query.from_user.id
        open_tasks = self.db.get_open_tasks()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç—á–µ—Ç—ã
        submitted_task_ids = set()
        try:
            user_submissions = self.db.get_user_submissions(user_id)
            for submission in user_submissions:
                # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                for task in open_tasks:
                    if task[1] == submission[0]:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                        submitted_task_ids.add(task[0])
                        break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {e}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
        available_tasks = [task for task in open_tasks if task[0] not in submitted_task_ids]
        
        if not available_tasks:
            text = (
                "üì§ **–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤**\n\n"
                f"üü¢ –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {len(open_tasks)}\n"
                f"‚úÖ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç—ã –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º!\n\n"
            )
            
            if len(open_tasks) == 0:
                text += (
                    "üö´ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.\n"
                    "–ó–∞–¥–∞–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –∏ —á–µ—Ç–≤–µ—Ä–≥–∞–º –≤ 11:00 –ú–°–ö."
                )
            else:
                text += (
                    "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª '–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç' –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n"
                    "–ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –∏ —á–µ—Ç–≤–µ—Ä–≥–∞–º –≤ 11:00 –ú–°–ö."
                )
            
            await query.edit_message_text(
                text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
            await query.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                reply_markup=self.keyboards.main_menu()
            )
            return
        
        text = (
            "üì§ **–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤**\n\n"
            f"üü¢ –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {len(open_tasks)}\n"
            f"üìù –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(available_tasks)}\n"
            f"‚úÖ –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(submitted_task_ids)}\n\n"
            "**–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:**"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
        keyboard = []
        
        for task_data in available_tasks:
            task_id, title, description, _ = task_data[:4]
            # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ  
            short_title = title[:40] + "..." if len(title) > 40 else title
            keyboard.append([InlineKeyboardButton(
                f"üìù {short_title}", 
                callback_data=f"submit_task_{task_id}"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_support_callback(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —á–µ—Ä–µ–∑ callback"""
        text = (
            "üÜò **–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É**\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
            "üë®‚Äçüíª @Danlocked\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å:\n"
            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏\n"
            "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏ —É—á–∞—Å—Ç–∏–µ–º\n"
            "‚Ä¢ –õ—é–±—ã–º–∏ –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"
        )
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
        await query.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=self.keyboards.main_menu()
        )

    async def _show_instructions_callback(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ callback"""
        current_time = datetime.now(self.moscow_tz)
        weekday = current_time.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if weekday < 1:  # –î–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
            next_publication = "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 11:00 –ú–°–ö"
        elif weekday < 3:  # –ú–µ–∂–¥—É –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–æ–º –∏ —á–µ—Ç–≤–µ—Ä–≥–æ–º
            next_publication = "—á–µ—Ç–≤–µ—Ä–≥ –≤ 11:00 –ú–°–ö"
        elif weekday < 5:  # –ú–µ–∂–¥—É —á–µ—Ç–≤–µ—Ä–≥–æ–º –∏ —Å—É–±–±–æ—Ç–æ–π
            next_publication = "—Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 11:00 –ú–°–ö"
        else:  # –í—ã—Ö–æ–¥–Ω—ã–µ
            next_publication = "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 11:00 –ú–°–ö"
        
        text = (
            "üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é**\n\n"
            "**–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π:**\n"
            "üïê –ü—É–±–ª–∏–∫–∞—Ü–∏—è: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥ –≤ 11:00 –ú–°–ö\n"
            "‚è∞ –î–µ–¥–ª–∞–π–Ω: —Å—É–±–±–æ—Ç–∞ –≤ 23:59 –ú–°–ö\n"
            f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {next_publication}\n\n"
            "**–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:**\n"
            "1Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π\n"
            "2Ô∏è‚É£ –ò–∑—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ë–∞–Ω–∫ –∑–∞–¥–∞–Ω–∏–π'\n"
            "3Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n"
            "4Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –æ—Ç—á–µ—Ç:\n"
            "   ‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\n"
            "   ‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
            "   ‚Ä¢ –í–∏–¥–µ–æ\n"
            "5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç –¥–æ —Å—É–±–±–æ—Ç—ã 23:59 –ú–°–ö\n"
            "6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n\n"
            "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –û–ø–æ–∑–¥–∞–≤—à–∏–µ –æ—Ç—á–µ—Ç—ã –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è, –Ω–æ –º—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∏–º!"
        )
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
        await query.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=self.keyboards.main_menu()
        )

    async def handle_photo_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if not self.db.is_user_registered(user_id):
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n\n"
                "üíæ –í–∞—à–µ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=self.keyboards.main_menu()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        saved_state, saved_context = self.db.get_user_state(user_id)
        
        if saved_state == TASK_SUBMISSION:
            # –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π handler
            for key, value in saved_context.items():
                context.user_data[key] = value
            return await self.handle_task_submission_content(update, context)
        
        # –ò–Ω–∞—á–µ —ç—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        photo = update.message.photo[-1]
        file_path = await self._download_and_save_file(photo, "photo", user_id, context)
        
        photo_data = json.dumps({
            'user_id': user_id,
            'content': update.message.caption or "–§–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏",
            'type': 'photo',
            'file_id': photo.file_id,
            'file_path': file_path,  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            'date': update.message.date.isoformat(),
            'context': 'potential_report_out_of_context'
        }, ensure_ascii=False)
        
        self.db.save_offline_message(user_id, photo_data, 'potential_report')
        logger.info(f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ-–æ—Ç—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {file_path}")
        
        await update.message.reply_text(
            "üì∏ **–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!**\n\n"
            "–í–∞—à–µ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
            "–ï—Å–ª–∏ —ç—Ç–æ –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç' –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
            reply_markup=self.keyboards.main_menu()
        )

    async def handle_video_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if not self.db.is_user_registered(user_id):
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n\n"
                "üíæ –í–∞—à–µ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=self.keyboards.main_menu()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        saved_state, saved_context = self.db.get_user_state(user_id)
        
        if saved_state == TASK_SUBMISSION:
            # –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π handler
            for key, value in saved_context.items():
                context.user_data[key] = value
            return await self.handle_task_submission_content(update, context)
        
        # –ò–Ω–∞—á–µ —ç—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        video = update.message.video
        file_path = await self._download_and_save_file(video, "video", user_id, context)
        
        video_data = json.dumps({
            'user_id': user_id,
            'content': update.message.caption or "–í–∏–¥–µ–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏",
            'type': 'video',
            'file_id': video.file_id,
            'file_path': file_path,  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            'date': update.message.date.isoformat(),
            'context': 'potential_report_out_of_context'
        }, ensure_ascii=False)
        
        self.db.save_offline_message(user_id, video_data, 'potential_report')
        logger.info(f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {file_path}")
        
        await update.message.reply_text(
            "üé• **–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ!**\n\n"
            "–í–∞—à–µ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
            "–ï—Å–ª–∏ —ç—Ç–æ –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç' –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
            reply_markup=self.keyboards.main_menu()
        )

    async def handle_document_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if not self.db.is_user_registered(user_id):
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n\n"
                "üíæ –í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=self.keyboards.main_menu()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        saved_state, saved_context = self.db.get_user_state(user_id)
        
        if saved_state == TASK_SUBMISSION:
            # –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π handler
            for key, value in saved_context.items():
                context.user_data[key] = value
            return await self.handle_task_submission_content(update, context)
        
        # –ò–Ω–∞—á–µ —ç—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        document = update.message.document
        file_path = await self._download_and_save_file(document, "document", user_id, context)
        
        document_data = json.dumps({
            'user_id': user_id,
            'content': update.message.caption or f"–î–æ–∫—É–º–µ–Ω—Ç: {document.file_name}",
            'type': 'document',
            'file_id': document.file_id,
            'file_path': file_path,  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            'filename': document.file_name,
            'date': update.message.date.isoformat(),
            'context': 'potential_report_out_of_context'
        }, ensure_ascii=False)
        
        self.db.save_offline_message(user_id, document_data, 'potential_report')
        logger.info(f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç-–æ—Ç—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {file_path}")
        
        await update.message.reply_text(
            "üìÑ **–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω!**\n\n"
            "–í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
            "–ï—Å–ª–∏ —ç—Ç–æ –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç' –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
            reply_markup=self.keyboards.main_menu()
        )

    async def _download_and_save_file(self, file_obj, file_type: str, user_id: int, context: ContextTypes.DEFAULT_TYPE, task_id: int = None) -> Optional[str]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –æ—Ç Telegram –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
        
        Args:
            file_obj: –û–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –æ—Ç Telegram
            file_type: –¢–∏–ø —Ñ–∞–π–ª–∞ (photo, video, document)
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API
            task_id: ID –∑–∞–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            if file_type == "photo":
                file_extension = ".jpg"
                subdirectory = "photos"
            elif file_type == "video":
                file_extension = ".mp4"
                subdirectory = "videos"
            elif file_type == "document":
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                original_name = getattr(file_obj, 'file_name', '')
                if '.' in original_name:
                    file_extension = '.' + original_name.split('.')[-1]
                else:
                    file_extension = ".bin"
                subdirectory = "documents"
            else:
                file_extension = ".unknown"
                subdirectory = "documents"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞: user123_task456_20250102_143000.jpg
            if task_id:
                filename = f"user{user_id}_task{task_id}_{timestamp}{file_extension}"
            else:
                filename = f"user{user_id}_potential_{timestamp}{file_extension}"
            
            # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            file_path = os.path.join(self.files_dir, subdirectory, filename)
            
            # –ü–æ–ª—É—á–∞–µ–º file_id –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            file_id = file_obj.file_id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –æ—Ç Telegram
            file_info = await context.bot.get_file(file_id)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª 
            await file_info.download_to_drive(file_path)
            
            logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path} (—Ä–∞–∑–º–µ—Ä: {os.path.getsize(file_path)} –±–∞–π—Ç)")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            return os.path.join(subdirectory, filename)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('BOT_TOKEN')
    if not token:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        logger.info("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å BOT_TOKEN=your_bot_token")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = EcoBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ persistence (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
    application = Application.builder().token(token).proxy(None).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (middleware)
    offline_handler = OfflineMessageHandler(bot.db)
    application.add_handler(offline_handler, -1)  # –î–æ–±–∞–≤–ª—è–µ–º —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    
    # ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ persistence
    registration_handler = ConversationHandler(
        entry_points=[CommandHandler("start", bot.start)],
        states={
            REGISTRATION_LAST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.registration_last_name)],
            REGISTRATION_FIRST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.registration_first_name)],
            PARTICIPATION_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.participation_type)],
            FAMILY_MEMBERS_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.family_members_count)],
            CHILDREN_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.children_info)]
        },
        fallbacks=[CommandHandler("start", bot.start)],
        allow_reentry=True,
        # –£–±–∏—Ä–∞–µ–º persistent=True - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        name="registration"
    )
    
    # ConversationHandler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π
    task_submission_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(bot.handle_callback, pattern="^submit_task_")],
        states={
            TASK_SUBMISSION: [MessageHandler(
                filters.TEXT | filters.PHOTO | filters.VIDEO | filters.Document.ALL, 
                bot.handle_task_submission_content
            )]
        },
        fallbacks=[MessageHandler(filters.Regex("^üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), bot._send_main_menu)],
        # –£–±–∏—Ä–∞–µ–º persistent=True - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        name="task_submission",
        per_message=False  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    )
    
    # ConversationHandler –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    profile_edit_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è$"), bot._start_edit_first_name),
            MessageHandler(filters.Regex("^‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é$"), bot._start_edit_last_name)
        ],
        states={
            EDIT_FIRST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_edit_first_name)],
            EDIT_LAST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_edit_last_name)]
        },
        fallbacks=[MessageHandler(filters.Regex("^üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), bot._send_main_menu)],
        name="profile_edit",
        per_message=False
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(registration_handler)
    application.add_handler(task_submission_handler)
    application.add_handler(profile_edit_handler)
    application.add_handler(CallbackQueryHandler(bot.handle_callback))
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    application.add_handler(MessageHandler(filters.Regex("^üÜò –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É$"), bot._start_support_request))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.PHOTO, bot.handle_photo_message))
    application.add_handler(MessageHandler(filters.VIDEO, bot.handle_video_message))
    application.add_handler(MessageHandler(filters.Document.ALL, bot.handle_document_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(bot.error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üåø –≠–∫–æ-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
    logger.info("üì± –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏")
    logger.info("üì¨ –û—Ñ–ª–∞–π–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ")
    logger.info("üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å")
    logger.info("üíæ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ persistence –≤ SQLite")
    logger.info("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 