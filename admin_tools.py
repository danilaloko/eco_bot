#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≠–∫–æ-–±–æ—Ç–æ–º
"""
import argparse
import sqlite3
from datetime import datetime, timedelta
import pytz
from database import Database

def add_task(args):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    db = Database()
    
    moscow_tz = pytz.timezone('Europe/Moscow')
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏, –≤—ã—á–∏—Å–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω
    deadline = None
    if args.week:
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É —Å—É–±–±–æ—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏
        current_year = datetime.now(moscow_tz).year
        jan_4 = datetime(current_year, 1, 4, tzinfo=moscow_tz)
        week_start = jan_4 + timedelta(weeks=args.week - 1, days=-jan_4.weekday())
        deadline = week_start + timedelta(days=5, hours=23, minutes=59)  # –°—É–±–±–æ—Ç–∞ 23:59
    
    db.add_task(
        title=args.title,
        description=args.description,
        link=args.link,
        week_number=args.week,
        deadline=deadline,
        is_open=args.open
    )
    
    print(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ '{args.title}' –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    if deadline:
        print(f"üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö')}")

def list_tasks(args):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π"""
    db = Database()
    tasks = db.get_all_tasks()
    
    if not tasks:
        print("üìù –ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    print("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π:\n")
    for task_id, title, description, link, is_open in tasks:
        status = "üü¢ –û—Ç–∫—Ä—ã—Ç–æ" if is_open else "üìÅ –ê—Ä—Ö–∏–≤"
        print(f"ID: {task_id}")
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
        print(f"–°—Å—ã–ª–∫–∞: {link or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
        print(f"–°—Ç–∞—Ç—É—Å: {status}")
        print("-" * 50)

def list_users(args):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    db = Database()
    
    with sqlite3.connect(db.db_path) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT user_id, username, telegram_first_name, telegram_last_name,
                   first_name, last_name, participation_type, family_members_count, 
                   children_info, registration_completed, registration_date 
            FROM users 
            ORDER BY registration_date DESC
        ''')
        users = cursor.fetchall()
    
    if not users:
        print("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    print("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n")
    for user_data in users:
        user_id, username, tg_first, tg_last, first_name, last_name, participation, family_count, children, completed, reg_date = user_data
        
        status = "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" if completed else "‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        
        print(f"ID: {user_id}")
        print(f"Username: @{username}" if username else "Username: –Ω–µ —É–∫–∞–∑–∞–Ω")
        print(f"Telegram: {tg_first} {tg_last or ''}".strip())
        if first_name and last_name:
            print(f"–ò–º—è: {first_name} {last_name}")
        print(f"–£—á–∞—Å—Ç–∏–µ: {participation}")
        if participation == 'family':
            print(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ–º—å–∏: {family_count}")
            if children:
                print(f"–î–µ—Ç–∏: {children}")
        print(f"–°—Ç–∞—Ç—É—Å: {status}")
        print(f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}")
        print("-" * 50)

def show_stats(args):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    db = Database()
    
    with sqlite3.connect(db.db_path) as conn:
        cursor = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]
        
        # –ó–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        cursor.execute('SELECT COUNT(*) FROM users WHERE registration_completed = TRUE')
        registered_users = cursor.fetchone()[0]
        
        # –°–µ–º–µ–π–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ
        cursor.execute('SELECT COUNT(*) FROM users WHERE participation_type = "family" AND registration_completed = TRUE')
        family_participants = cursor.fetchone()[0]
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
        cursor.execute('SELECT COUNT(*) FROM tasks')
        total_tasks = cursor.fetchone()[0]
        
        # –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è
        cursor.execute('SELECT COUNT(*) FROM tasks WHERE is_open = TRUE')
        open_tasks = cursor.fetchone()[0]
        
        # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        cursor.execute('SELECT COUNT(*) FROM submissions')
        total_submissions = cursor.fetchone()[0]
        
        # –û—Ç—á–µ—Ç—ã –≤ —Å—Ä–æ–∫
        cursor.execute('SELECT COUNT(*) FROM submissions WHERE is_on_time = TRUE')
        on_time_submissions = cursor.fetchone()[0]
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≠–∫–æ-–±–æ—Ç–∞:")
    print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {registered_users}")
    print(f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ: {family_participants}")
    print(f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {total_tasks}")
    print(f"üü¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {open_tasks}")
    print(f"üì§ –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {total_submissions}")
    print(f"‚è∞ –û—Ç—á–µ—Ç–æ–≤ –≤ —Å—Ä–æ–∫: {on_time_submissions}")

def create_weekly_tasks(args):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏"""
    db = Database()
    db.create_weekly_tasks(args.week)
    print(f"‚úÖ –ó–∞–¥–∞–Ω–∏—è –¥–ª—è –Ω–µ–¥–µ–ª–∏ {args.week} —Å–æ–∑–¥–∞–Ω—ã!")

def close_task(args):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ (–ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –∞—Ä—Ö–∏–≤)"""
    db = Database()
    
    with sqlite3.connect(db.db_path) as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE tasks SET is_open = FALSE WHERE id = ?', (args.task_id,))
        
        if cursor.rowcount > 0:
            conn.commit()
            print(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {args.task_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤")
        else:
            print(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ {args.task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

def main():
    parser = argparse.ArgumentParser(description='–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≠–∫–æ-–±–æ—Ç–∞')
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
    add_parser = subparsers.add_parser('add-task', help='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ')
    add_parser.add_argument('title', help='–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è')
    add_parser.add_argument('--description', '-d', help='–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è')
    add_parser.add_argument('--link', '-l', help='–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ')
    add_parser.add_argument('--week', '-w', type=int, help='–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏')
    add_parser.add_argument('--open', action='store_true', default=True, help='–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ')
    add_parser.set_defaults(func=add_task)
    
    # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
    list_tasks_parser = subparsers.add_parser('list-tasks', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è')
    list_tasks_parser.set_defaults(func=list_tasks)
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    list_users_parser = subparsers.add_parser('list-users', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    list_users_parser.set_defaults(func=list_users)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats_parser = subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    stats_parser.set_defaults(func=show_stats)
    
    # –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–µ–ª–∏
    weekly_parser = subparsers.add_parser('create-week', help='–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –Ω–µ–¥–µ–ª–∏')
    weekly_parser.add_argument('week', type=int, help='–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏')
    weekly_parser.set_defaults(func=create_weekly_tasks)
    
    # –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞–Ω–∏–µ
    close_parser = subparsers.add_parser('close-task', help='–ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞–Ω–∏–µ')
    close_parser.add_argument('task_id', type=int, help='ID –∑–∞–¥–∞–Ω–∏—è')
    close_parser.set_defaults(func=close_task)
    
    args = parser.parse_args()
    
    if hasattr(args, 'func'):
        args.func(args)
    else:
        parser.print_help()

if __name__ == '__main__':
    main() 