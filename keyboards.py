from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

class Keyboards:
    @staticmethod
    def main_menu():
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º"""
        keyboard = [
            [KeyboardButton("üìã –ü–æ–ª–æ–∂–µ–Ω–∏–µ –æ–± –∏–≥—Ä–µ"), KeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é")],
            [KeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"), KeyboardButton("üè¶ –ë–∞–Ω–∫ –∑–∞–¥–∞–Ω–∏–π")],
            [KeyboardButton("üìä –ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"), KeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton("üÜò –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"), KeyboardButton("üåø –û –î–≤–∏–∂–µ–Ω–∏–∏ –¥—Ä—É–∑–µ–π –∑–∞–ø–æ–≤–µ–¥–Ω—ã—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    @staticmethod
    def participation_type():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—á–∞—Å—Ç–∏—è –≤ –¥–≤–∞ —Ä—è–¥–∞"""
        keyboard = [
            [KeyboardButton("üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ"), KeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å–µ–π")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    @staticmethod
    def back_to_menu():
        """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [[KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    @staticmethod
    def profile_edit():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        keyboard = [
            [KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"), KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é")],
            [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    @staticmethod
    def out_of_context_actions():
        """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        keyboard = [
            [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="submit_tasks")],
            [InlineKeyboardButton("üÜò –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="support")],
            [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é", callback_data="instructions")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def task_selection(tasks):
        """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º"""
        keyboard = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≤–∏–¥–∞
        for i in range(0, len(tasks), 2):
            row = []
            
            # –ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä—è–¥—É
            task_id, title, _, _ = tasks[i]
            # –°–æ–∫—Ä–∞—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            short_title = title[:25] + "..." if len(title) > 25 else title
            row.append(InlineKeyboardButton(
                f"üìù {short_title}", 
                callback_data=f"submit_task_{task_id}"
            ))
            
            # –í—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if i + 1 < len(tasks):
                task_id2, title2, _, _ = tasks[i + 1]
                short_title2 = title2[:25] + "..." if len(title2) > 25 else title2
                row.append(InlineKeyboardButton(
                    f"üìù {short_title2}", 
                    callback_data=f"submit_task_{task_id2}"
                ))
            
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def tasks_bank(open_tasks, archived_tasks):
        """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±–∞–Ω–∫–∞ –∑–∞–¥–∞–Ω–∏–π –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ"""
        keyboard = []
        
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_row = []
        if open_tasks:
            category_row.append(InlineKeyboardButton("üü¢ –û—Ç–∫—Ä—ã—Ç—ã–µ", callback_data="show_open_tasks"))
        
        if archived_tasks:
            category_row.append(InlineKeyboardButton("üìÅ –ê—Ä—Ö–∏–≤–Ω—ã–µ", callback_data="show_archived_tasks"))
        
        if category_row:
            keyboard.append(category_row)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def task_links(tasks, task_type="open"):
        """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ"""
        keyboard = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(tasks), 2):
            row = []
            
            # –ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ –≤ —Ä—è–¥—É
            task_data = tasks[i]
            task_id, title, description, link = task_data[:4]
            
            if task_type == "open":
                is_open = True
            else:
                is_open = task_data[4] if len(task_data) > 4 else True
            
            if link:
                emoji = "üü¢" if is_open else "üìÅ"
                # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
                short_title = title[:20] + "..." if len(title) > 20 else title
                row.append(InlineKeyboardButton(
                    f"{emoji} {short_title}", 
                    url=link
                ))
            
            # –í—Ç–æ—Ä–∞—è —Å—Å—ã–ª–∫–∞ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if i + 1 < len(tasks):
                task_data2 = tasks[i + 1]
                task_id2, title2, description2, link2 = task_data2[:4]
                
                if task_type == "open":
                    is_open2 = True
                else:
                    is_open2 = task_data2[4] if len(task_data2) > 4 else True
                
                if link2:
                    emoji2 = "üü¢" if is_open2 else "üìÅ"
                    short_title2 = title2[:20] + "..." if len(title2) > 20 else title2
                    row.append(InlineKeyboardButton(
                        f"{emoji2} {short_title2}", 
                        url=link2
                    ))
            
            if row:  # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –Ω–µ–º –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
                keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –±–∞–Ω–∫—É –∑–∞–¥–∞–Ω–∏–π", callback_data="tasks_bank")])
        return InlineKeyboardMarkup(keyboard) 