#!/usr/bin/env python3
"""
–ê–¥–º–∏–Ω-–±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≠–∫–æ-–±–æ—Ç–æ–º
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º:
- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
- –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤
- –ü–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
"""

import os
import json
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any

import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes, ConversationHandler
)

from database import Database

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
ADDING_TASK_TITLE = 1
ADDING_TASK_DESCRIPTION = 2
ADDING_TASK_LINK = 3
ADDING_TASK_OPEN_DATE = 4
ADDING_TASK_DEADLINE = 5

EDITING_TASK_TITLE = 10
EDITING_TASK_DESCRIPTION = 11
EDITING_TASK_LINK = 12
EDITING_TASK_STATUS = 13
EDITING_TASK_WEEK = 14
EDITING_TASK_DEADLINE = 15
EDITING_TASK_OPEN_DATE = 16

REVIEWING_SUBMISSION = 20

class AdminBot:
    def __init__(self):
        self.db = Database()
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        
        # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
        self.admin_ids = self._get_admin_ids()
        
    def _get_admin_ids(self) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        admin_env = os.getenv('ADMIN_IDS', os.getenv('ADMIN_ID', ''))
        if not admin_env:
            logger.warning("ADMIN_IDS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            return []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "all"
        if admin_env.strip().lower() == 'all':
            logger.warning("‚ö†Ô∏è –†–ï–ñ–ò–ú –û–¢–ö–†–´–¢–û–ì–û –î–û–°–¢–£–ü–ê: –ê–¥–º–∏–Ω-–±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
            return ['all']  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä
        
        admin_ids = []
        for admin_id in admin_env.split(','):
            try:
                admin_ids.append(int(admin_id.strip()))
            except ValueError:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ADMIN_ID: {admin_id}")
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_ids}")
        return admin_ids
    
    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        if len(self.admin_ids) == 1 and self.admin_ids[0] == 'all':
            return True
        
        return user_id in self.admin_ids
    
    async def _check_admin_access(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤"""
        user_id = update.effective_user.id
        if not self._is_admin(user_id):
            await update.effective_message.reply_text(
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω**\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≠–∫–æ-–±–æ—Ç–∞.",
                parse_mode='Markdown'
            )
            return False
        return True

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not await self._check_admin_access(update):
            return
        
        user = update.effective_user
        
        welcome_text = (
            f"üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≠–∫–æ-–±–æ—Ç–∞**\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
            f"‚Ä¢ üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏\n"
            f"‚Ä¢ üì§ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤\n"
            f"‚Ä¢ ‚úÖ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤\n"
            f"‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"‚Ä¢ üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="tasks_menu")],
            [InlineKeyboardButton("üì§ –û—Ç—á–µ—Ç—ã", callback_data="reports_menu")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu")],
            [InlineKeyboardButton("üîß –°–∏—Å—Ç–µ–º–∞", callback_data="system_menu")]
        ]
        
        await update.message.reply_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        if not await self._check_admin_access(update):
            return
        
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "main_menu":
            await self._show_main_menu(query)
        elif data == "tasks_menu":
            await self._show_tasks_menu(query)
        elif data == "reports_menu":
            await self._show_reports_menu(query)
        elif data == "stats_menu":
            await self._show_stats_menu(query)
        elif data == "system_menu":
            await self._show_system_menu(query)
        elif data == "add_task":
            await self._show_add_task_menu(query)
        elif data == "list_tasks":
            await self._show_tasks_list(query)
        elif data == "pending_reports":
            await self._show_pending_reports(query)
        elif data == "all_reports":
            await self._show_all_reports(query)
        elif data == "potential_reports":
            await self._show_potential_reports(query)
        elif data.startswith("task_"):
            await self._handle_task_action(query, context, data)
        elif data.startswith("report_"):
            await self._handle_report_action(query, context, data)
        elif data.startswith("approve_"):
            await self._approve_report(query, data)
        elif data.startswith("reject_"):
            await self._reject_report(query, data)
        elif data == "edit_task_preview":
            await self._edit_task_preview(query, context)
        elif data.startswith("edit_task_"):
            await self._start_edit_task(query, context, data)
        elif data.startswith("toggle_task_"):
            await self._toggle_task_status(query, data)
        elif data.startswith("delete_task_"):
            await self._delete_task(query, data)
        elif data.startswith("confirm_delete_"):
            await self._confirm_delete_task(query, data)
        elif data.startswith("task_reports_"):
            task_id = int(data.split('_')[2])  # task_reports_123
            await self._show_task_reports(query, f"task_reports_{task_id}")
        elif data.startswith("user_profile_"):
            await self._show_user_profile(query, data)
        elif data.startswith("user_reports_"):
            await self._show_user_reports(query, data)
        elif data == "export_data":
            await self._handle_export_data(query)
        elif data == "clear_logs":
            await self._handle_clear_logs(query)
        elif data == "confirm_clear_logs":
            await self._confirm_clear_logs(query)
        elif data.startswith("export_"):
            await self._handle_specific_export(query, data)
        elif data.startswith("show_file_"):
            await self._show_file(query, data)
        elif data.startswith("potential_"):
            await self._handle_potential_report(query, data)
        elif data.startswith("assign_potential_"):
            await self._assign_potential_to_task(query, data)
        elif data.startswith("mark_processed_"):
            await self._mark_potential_processed(query, data)
        elif data.startswith("delete_potential_"):
            await self._delete_potential_report(query, data)
        elif data.startswith("show_potential_file_"):
            await self._show_potential_file(query, data)
        elif data.startswith("edit_title_"):
            await self._start_edit_title(update, context)
        elif data.startswith("edit_desc_"):
            await self._start_edit_description(update, context)
        elif data.startswith("edit_link_"):
            await self._start_edit_link(update, context)
        elif data.startswith("edit_open_date_"):
            await self._start_edit_open_date(update, context)
        elif data.startswith("edit_deadline_"):
            await self._start_edit_deadline(update, context)
        # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
        elif data.startswith("template_"):
            await self._handle_template_callback(query, context, data)
        elif data == "confirm_create_task":
            await self._confirm_create_task(query, context)
        elif data == "edit_task_preview":
            await self._edit_task_preview(query, context)
        elif data == "edit_preview_title":
            await self._start_preview_edit_title(query, context, data)
        elif data == "edit_preview_description":
            await self._start_preview_edit_description(query, context, data)
        elif data == "edit_preview_link":
            await self._start_preview_edit_link(query, context, data)
        elif data == "edit_preview_open_date":
            await self._start_preview_edit_open_date(query, context, data)
        elif data == "edit_preview_deadline":
            await self._start_preview_edit_deadline(query, context, data)


    async def _handle_template_callback(self, query, context, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ —á–µ—Ä–µ–∑ callback"""
        template_type = data.replace('template_', '')
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        templates = {
            'observation': {
                'title': '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ',
                'description': '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø—Ä–∏—Ä–æ–¥–æ–π –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏.',
                'link': None
            },
            'action': {
                'title': '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                'description': '–°–æ–≤–µ—Ä—à–∏—Ç–µ –æ–¥–Ω–æ –ø–æ–ª–µ–∑–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–±–æ—Ä–∫–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏, –ø–æ—Å–∞–¥–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π –∏–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç—Ö–æ–¥–æ–≤.',
                'link': None
            },
            'research': {
                'title': '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥—ã',
                'description': '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ. –ò–∑—É—á–∏—Ç–µ –µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.',
                'link': None
            }
        }
        
        template = templates.get(template_type)
        if not template:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω!")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        current_date = datetime.now(self.moscow_tz)
        template['title'] = f"{template['title']} - {current_date.strftime('%d.%m.%Y')}"
        
        context.user_data['adding_task'] = template.copy()
        context.user_data['adding_task']['open_date'] = current_date
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω (—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é)
        deadline = current_date + timedelta(days=7)
        deadline = deadline.replace(hour=23, minute=59, second=59)
        context.user_data['adding_task']['deadline'] = deadline
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        preview_text = self._generate_task_preview(context.user_data['adding_task'], deadline)
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="confirm_create_task")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_task_preview")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="tasks_menu")]
        ]
        
        await query.edit_message_text(
            f"üéØ **–®–∞–±–ª–æ–Ω '{template_type}' –ø—Ä–∏–º–µ–Ω–µ–Ω!**\n\n{preview_text}",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _confirm_create_task(self, query, context):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
        task_data = context.user_data.get('adding_task', {})
        
        if not task_data:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å–µ–π—á–∞—Å
            open_date = task_data.get('open_date', datetime.now(self.moscow_tz))
            is_open = open_date <= datetime.now(self.moscow_tz)
            
            self.db.add_task(
                title=task_data['title'],
                description=task_data['description'],
                link=task_data['link'],
                week_number=None,  # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
                deadline=task_data['deadline'],
                is_open=is_open,
                open_date=open_date
            )
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            with self.db._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT id FROM tasks WHERE title = ? ORDER BY id DESC LIMIT 1', (task_data['title'],))
                task_id = cursor.fetchone()[0]
            
            success_text = (
                "‚úÖ **–ó–ê–î–ê–ù–ò–ï –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–û!**\n\n"
                f"üÜî **ID –∑–∞–¥–∞–Ω–∏—è:** {task_id}\n"
                f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task_data['title']}\n"
                f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {task_data['description'][:100]}{'...' if len(task_data['description']) > 100 else ''}\n"
                f"üîó **–°—Å—ã–ª–∫–∞:** {task_data['link'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                f"üìÖ **–û—Ç–∫—Ä—ã—Ç–∏–µ:** {open_date.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö')}\n"
                f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {task_data['deadline'].strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö') if task_data['deadline'] else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                f"üü¢ **–°—Ç–∞—Ç—É—Å:** {'–û—Ç–∫—Ä—ã—Ç–æ' if is_open else '–û–∂–∏–¥–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è'}\n\n"
                f"üéâ **–ó–∞–¥–∞–Ω–∏–µ {'–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º' if is_open else '–±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è'}!**"
            )
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="add_task")],
                [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"task_{task_id}")],
                [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="list_tasks")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            await query.edit_message_text(
                success_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: '{task_data['title']}' (ID: {task_id})")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
            
            error_text = (
                "‚ùå **–û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ó–ê–î–ê–ù–ò–Ø**\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="confirm_create_task")],
                [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_task_preview")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="tasks_menu")]
            ]
            
            await query.edit_message_text(
                error_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    async def _edit_task_preview(self, query, context):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º"""
        task_data = context.user_data.get('adding_task', {})
        
        if not task_data:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        open_date = task_data.get('open_date', datetime.now(self.moscow_tz))
        
        text = (
            "‚úèÔ∏è **–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø**\n\n"
            f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task_data['title']}\n"
            f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {task_data['description'][:100]}{'...' if len(task_data['description']) > 100 else ''}\n"
            f"üîó **–°—Å—ã–ª–∫–∞:** {task_data['link'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üìÖ **–û—Ç–∫—Ä—ã—Ç–∏–µ:** {open_date.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö')}\n"
            f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {task_data['deadline'].strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö') if task_data['deadline'] else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
            f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_preview_title")],
            [InlineKeyboardButton("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_preview_description")],
            [InlineKeyboardButton("üîó –°—Å—ã–ª–∫—É", callback_data="edit_preview_link")],
            [InlineKeyboardButton("üìÖ –î–∞—Ç—É –æ—Ç–∫—Ä—ã—Ç–∏—è", callback_data="edit_preview_open_date")],
            [InlineKeyboardButton("‚è∞ –î–µ–¥–ª–∞–π–Ω", callback_data="edit_preview_deadline")],
            [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ, —Å–æ–∑–¥–∞—Ç—å", callback_data="confirm_create_task")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="tasks_menu")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _start_preview_edit_title(self, query, context, data):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ"""
        task_data = context.user_data.get('adding_task', {})
        current_title = task_data.get('title', '')
        
        text = (
            "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è**\n\n"
            f"üìù **–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:** {current_title}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:"
        )
        
        await query.edit_message_text(text, parse_mode='Markdown')
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        return ADDING_TASK_TITLE

    async def _start_preview_edit_description(self, query, context, data):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ"""
        task_data = context.user_data.get('adding_task', {})
        current_description = task_data.get('description', '')
        
        text = (
            "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è**\n\n"
            f"üìÑ **–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:** {current_description[:200]}{'...' if len(current_description) > 200 else ''}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:"
        )
        
        await query.edit_message_text(text, parse_mode='Markdown')
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        return ADDING_TASK_DESCRIPTION

    async def _start_preview_edit_link(self, query, context, data):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ"""
        task_data = context.user_data.get('adding_task', {})
        current_link = task_data.get('link') or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
        
        text = (
            "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏**\n\n"
            f"üîó **–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞:** {current_link}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ '–Ω–µ—Ç' —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å:"
        )
        
        await query.edit_message_text(text, parse_mode='Markdown')
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
        return ADDING_TASK_LINK

    async def _start_preview_edit_open_date(self, query, context, data):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ"""
        task_data = context.user_data.get('adding_task', {})
        current_date = task_data.get('open_date', datetime.now(self.moscow_tz))
        
        text = (
            "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è**\n\n"
            f"üìÖ **–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:** {current_date.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö')}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ—Ç–∫—Ä—ã—Ç–∏—è:\n"
            "‚Ä¢ `—Å–µ–π—á–∞—Å` - –æ—Ç–∫—Ä—ã—Ç—å —Å–µ–π—á–∞—Å\n"
            "‚Ä¢ `–∑–∞–≤—Ç—Ä–∞` - –∑–∞–≤—Ç—Ä–∞ –≤ 09:00\n"
            "‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú` - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞"
        )
        
        await query.edit_message_text(text, parse_mode='Markdown')
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è
        return ADDING_TASK_OPEN_DATE

    async def _start_preview_edit_deadline(self, query, context, data):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ"""
        task_data = context.user_data.get('adding_task', {})
        current_deadline = task_data.get('deadline')
        
        if current_deadline:
            deadline_str = current_deadline.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö')
        else:
            deadline_str = '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        
        text = (
            "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞**\n\n"
            f"‚è∞ **–¢–µ–∫—É—â–∏–π –¥–µ–¥–ª–∞–π–Ω:** {deadline_str}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω:\n"
            "‚Ä¢ `–∞–≤—Ç–æ` - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç\n"
            "‚Ä¢ `–∑–∞–≤—Ç—Ä–∞` - –∑–∞–≤—Ç—Ä–∞ –≤ 23:59\n"
            "‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú` - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞\n"
            "‚Ä¢ `–Ω–µ—Ç` - –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"
        )
        
        await query.edit_message_text(text, parse_mode='Markdown')
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞
        return ADDING_TASK_DEADLINE

    async def _show_main_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        text = (
            "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≠–∫–æ-–±–æ—Ç–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="tasks_menu")],
            [InlineKeyboardButton("üì§ –û—Ç—á–µ—Ç—ã", callback_data="reports_menu")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu")],
            [InlineKeyboardButton("üîß –°–∏—Å—Ç–µ–º–∞", callback_data="system_menu")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_tasks_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏"""
        text = (
            "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="add_task")],
            [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="list_tasks")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_reports_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç—á–µ—Ç–æ–≤
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            
            # –û–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            cursor.execute("SELECT COUNT(*) FROM submissions WHERE status = 'pending'")
            pending_count = cursor.fetchone()[0]
            
            # –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤
            cursor.execute("SELECT COUNT(*) FROM submissions")
            total_count = cursor.fetchone()[0]
            
            # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
            cursor.execute("SELECT COUNT(*) FROM offline_messages WHERE message_type = 'potential_report' AND processed = FALSE")
            potential_count = cursor.fetchone()[0]
        
        text = (
            "üì§ **–†–∞–±–æ—Ç–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏**\n\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {pending_count}\n"
            f"üìù –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {total_count}\n"
            f"üîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: {potential_count}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton(f"‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ({pending_count})", callback_data="pending_reports")],
            [InlineKeyboardButton("üì§ –í—Å–µ –æ—Ç—á–µ—Ç—ã", callback_data="all_reports")],
            [InlineKeyboardButton(f"üîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ ({potential_count})", callback_data="potential_reports")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_stats_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            cursor.execute('SELECT COUNT(*) FROM users')
            total_users = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM users WHERE registration_completed = TRUE')
            registered_users = cursor.fetchone()[0]
            
            # –ó–∞–¥–∞–Ω–∏—è
            cursor.execute('SELECT COUNT(*) FROM tasks')
            total_tasks = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM tasks WHERE is_open = TRUE')
            open_tasks = cursor.fetchone()[0]
            
            # –û—Ç—á–µ—Ç—ã
            cursor.execute('SELECT COUNT(*) FROM submissions')
            total_submissions = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM submissions WHERE status = "pending"')
            pending_submissions = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM submissions WHERE status = "approved"')
            approved_submissions = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM submissions WHERE is_on_time = TRUE')
            on_time_submissions = cursor.fetchone()[0]
        
        text = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≠–∫–æ-–±–æ—Ç–∞**\n\n"
            f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
            f"   ‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {registered_users}\n\n"
            f"üìã **–ó–∞–¥–∞–Ω–∏—è:**\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_tasks}\n"
            f"   ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {open_tasks}\n\n"
            f"üì§ **–û—Ç—á–µ—Ç—ã:**\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_submissions}\n"
            f"   ‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {pending_submissions}\n"
            f"   ‚Ä¢ –û–¥–æ–±—Ä–µ–Ω—ã: {approved_submissions}\n"
            f"   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Å—Ä–æ–∫: {on_time_submissions}\n\n"
            f"üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
            f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registered_users/max(total_users, 1)*100:.1f}%\n"
            f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {approved_submissions/max(total_submissions, 1)*100:.1f}%\n"
            f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ —Å—Ä–æ–∫: {on_time_submissions/max(total_submissions, 1)*100:.1f}%"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_system_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é"""
        text = (
            "üîß **–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏**\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
            [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤", callback_data="clear_logs")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_add_task_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        text = (
            "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è**\n\n"
            "üöÄ **–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤\n"
            "‚Ä¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üéØ –®–∞–±–ª–æ–Ω: –ù–∞–±–ª—é–¥–µ–Ω–∏–µ", callback_data="template_observation")],
            [InlineKeyboardButton("üå± –®–∞–±–ª–æ–Ω: –î–µ–π—Å—Ç–≤–∏–µ", callback_data="template_action")],
            [InlineKeyboardButton("üî¨ –®–∞–±–ª–æ–Ω: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data="template_research")],
            [InlineKeyboardButton("‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å —Å –Ω—É–ª—è", callback_data="create_manual")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="tasks_menu")]
        ]
        
        await query.edit_message_text(
            text, 
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _start_add_task_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —Å –Ω—É–ª—è"""
        query = update.callback_query
        await query.answer()
        
        if not await self._check_admin_access(update):
            return ConversationHandler.END
        
        context.user_data['adding_task'] = {}
        
        text = (
            "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –Ω—É–ª—è**\n\n"
            "üìù **–®–∞–≥ 1/5:** –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "üí° *–ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º 100*\n\n"
            "‚ö° **–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ `/template_observation` - –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ\n"
            "‚Ä¢ `/template_action` - –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
            "‚Ä¢ `/template_research` - –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥—ã\n\n"
            "üîß *–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ* `/cancel`"
        )
        
        await query.edit_message_text(text, parse_mode='Markdown')
        return ADDING_TASK_TITLE

    async def _start_add_task(self, query, context):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        context.user_data['adding_task'] = {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        current_week = datetime.now(self.moscow_tz).isocalendar()[1]
        
        text = (
            "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è**\n\n"
            "üöÄ **–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤\n"
            "‚Ä¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º\n\n"
            "üìù **–®–∞–≥ 1/5:** –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "üí° *–ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º 100*\n\n"
            "‚ö° **–ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã:**\n"
            "‚Ä¢ `/template_observation` - –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ\n"
            "‚Ä¢ `/template_action` - –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
            "‚Ä¢ `/template_research` - –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥—ã\n\n"
            "üîß *–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ* `/cancel`"
        )
        
        keyboard = [
            [InlineKeyboardButton("üéØ –®–∞–±–ª–æ–Ω: –ù–∞–±–ª—é–¥–µ–Ω–∏–µ", callback_data="template_observation")],
            [InlineKeyboardButton("üå± –®–∞–±–ª–æ–Ω: –î–µ–π—Å—Ç–≤–∏–µ", callback_data="template_action")],
            [InlineKeyboardButton("üî¨ –®–∞–±–ª–æ–Ω: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data="template_research")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="tasks_menu")]
        ]
        
        await query.edit_message_text(
            text, 
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADDING_TASK_TITLE

    async def handle_add_task_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        if not await self._check_admin_access(update):
            return ConversationHandler.END
        
        title = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã —à–∞–±–ª–æ–Ω–æ–≤
        if title.startswith('/template_'):
            template_type = title.replace('/template_', '')
            return await self._apply_task_template(update, context, template_type)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(title) < 5:
            await update.message.reply_text(
                "‚ùå **–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ**\n\n"
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω:"
            )
            return ADDING_TASK_TITLE
        
        if len(title) > 100:
            await update.message.reply_text(
                "‚ùå **–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ**\n\n"
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å:"
            )
            return ADDING_TASK_TITLE
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        if self._check_task_title_exists(title):
            await update.message.reply_text(
                "‚ö†Ô∏è **–ó–∞–¥–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç**\n\n"
                "–ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏):"
            )
            return ADDING_TASK_TITLE
        
        context.user_data['adding_task']['title'] = title
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress = "üü¢üîòüîòüîòüîò"
        
        await update.message.reply_text(
            f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!**\n"
            f"üìù *{title}*\n\n"
            f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress} (1/5)\n\n"
            f"üìÑ **–®–∞–≥ 2/5:** –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
            f"üí° *–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω—ã —Å–¥–µ–ª–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏*\n\n"
            f"üìã **–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:**\n"
            f"‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ 3 –≤–∏–¥–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —É–±–æ—Ä–∫—É —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ø–ª–æ—â–∞–¥—å—é 100 –∫–≤.–º\n"
            f"‚Ä¢ –ò–∑–º–µ—Ä—å—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–¥—ã –≤ –±–ª–∏–∂–∞–π—à–µ–º –≤–æ–¥–æ–µ–º–µ"
        )
        return ADDING_TASK_DESCRIPTION

    async def handle_add_task_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        if not await self._check_admin_access(update):
            return ConversationHandler.END
        
        description = update.message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        if len(description) < 10:
            await update.message.reply_text(
                "‚ùå **–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ**\n\n"
                "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:"
            )
            return ADDING_TASK_DESCRIPTION
        
        if len(description) > 1000:
            await update.message.reply_text(
                "‚ùå **–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ**\n\n"
                "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ:"
            )
            return ADDING_TASK_DESCRIPTION
        
        context.user_data['adding_task']['description'] = description
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress = "üü¢üü¢üîòüîòüîò"
        
        await update.message.reply_text(
            f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!**\n"
            f"üìÑ *{description[:100]}{'...' if len(description) > 100 else ''}*\n\n"
            f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress} (2/5)\n\n"
            f"üîó **–®–∞–≥ 3/5:** –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ\n"
            f"üí° *–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤*\n\n"
            f"üìã **–í–∞—Ä–∏–∞–Ω—Ç—ã –≤–≤–æ–¥–∞:**\n"
            f"‚Ä¢ –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞: `https://example.com/task`\n"
            f"‚Ä¢ –ë–µ–∑ —Å—Å—ã–ª–∫–∏: `–Ω–µ—Ç`, `no`, `-` –∏–ª–∏ `–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å`\n"
            f"‚Ä¢ Telegram –∫–∞–Ω–∞–ª: `@channel_name`",
            parse_mode='Markdown'
        )
        return ADDING_TASK_LINK

    async def handle_add_task_link(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –∑–∞–¥–∞–Ω–∏—è"""
        if not await self._check_admin_access(update):
            return ConversationHandler.END
        
        link = update.message.text.strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏
        if link.lower() in ['–Ω–µ—Ç', 'no', '-', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip']:
            link = None
        else:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
            if not self._validate_url(link):
                await update.message.reply_text(
                    "‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞**\n\n"
                    "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `http://`, `https://` –∏–ª–∏ `@` (–¥–ª—è Telegram)\n\n"
                    "üìã **–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:**\n"
                    "‚Ä¢ `https://example.com/task`\n"
                    "‚Ä¢ `@eco_channel`\n"
                    "‚Ä¢ `https://t.me/eco_channel`\n\n"
                    "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ `–Ω–µ—Ç` –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞:",
                    parse_mode='Markdown'
                )
                return ADDING_TASK_LINK
        
        context.user_data['adding_task']['link'] = link
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
        current_week = datetime.now(self.moscow_tz).isocalendar()[1]
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress = "üü¢üü¢üü¢üîòüîò"
        
        await update.message.reply_text(
            f"‚úÖ **–°—Å—ã–ª–∫–∞ {'–¥–æ–±–∞–≤–ª–µ–Ω–∞' if link else '–ø—Ä–æ–ø—É—â–µ–Ω–∞'}!**\n"
            f"üîó *{link or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}*\n\n"
            f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress} (3/5)\n\n"
            f"üìÖ **–®–∞–≥ 4/5:** –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞–Ω–∏—è\n"
            f"üí° *–ö–æ–≥–¥–∞ –∑–∞–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º*\n\n"
            f"üìã **–í–∞—Ä–∏–∞–Ω—Ç—ã –≤–≤–æ–¥–∞:**\n"
            f"‚Ä¢ –°–µ–π—á–∞—Å: `—Å–µ–π—á–∞—Å` –∏–ª–∏ `now`\n"
            f"‚Ä¢ –ó–∞–≤—Ç—Ä–∞: `–∑–∞–≤—Ç—Ä–∞` –∏–ª–∏ `tomorrow`\n"
            f"‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞: `–î–î.–ú–ú.–ì–ì–ì–ì` –∏–ª–∏ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n"
            f"‚Ä¢ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é: `–Ω–µ–¥–µ–ª—è` –∏–ª–∏ `week`"
        )
        return ADDING_TASK_OPEN_DATE

    async def handle_add_task_open_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        if not await self._check_admin_access(update):
            return ConversationHandler.END
        
        open_date_input = update.message.text.strip().lower()
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–≤–æ–¥–∞
            if open_date_input in ['—Å–µ–π—á–∞—Å', 'now']:
                open_date = datetime.now(self.moscow_tz)
            elif open_date_input in ['–∑–∞–≤—Ç—Ä–∞', 'tomorrow']:
                open_date = datetime.now(self.moscow_tz) + timedelta(days=1)
                open_date = open_date.replace(hour=9, minute=0, second=0, microsecond=0)
            elif open_date_input in ['–Ω–µ–¥–µ–ª—è', 'week']:
                open_date = datetime.now(self.moscow_tz) + timedelta(weeks=1)
                open_date = open_date.replace(hour=9, minute=0, second=0, microsecond=0)
            else:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                try:
                    if ' ' in open_date_input:
                        # –§–æ—Ä–º–∞—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º
                        open_date = datetime.strptime(open_date_input, '%d.%m.%Y %H:%M')
                    else:
                        # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞, –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 09:00
                        open_date = datetime.strptime(open_date_input, '%d.%m.%Y')
                        open_date = open_date.replace(hour=9, minute=0)
                    
                    open_date = self.moscow_tz.localize(open_date)
                except ValueError:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º (—Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
                if open_date < datetime.now(self.moscow_tz):
                    await update.message.reply_text(
                        "‚ùå **–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –ø—Ä–æ—à–ª–æ–º**\n\n"
                        "–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º –∏–ª–∏ —Å–µ–π—á–∞—Å.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                    )
                    return ADDING_TASK_OPEN_DATE
                    
        except ValueError as e:
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 09:00)\n"
                "‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì` (–≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 09:00)\n"
                "‚Ä¢ `—Å–µ–π—á–∞—Å` - –æ—Ç–∫—Ä—ã—Ç—å —Å–µ–π—á–∞—Å\n"
                "‚Ä¢ `–∑–∞–≤—Ç—Ä–∞` - –∑–∞–≤—Ç—Ä–∞ –≤ 09:00\n"
                "‚Ä¢ `–Ω–µ–¥–µ–ª—è` - —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤ 09:00"
            )
            return ADDING_TASK_OPEN_DATE
        
        context.user_data['adding_task']['open_date'] = open_date
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –¥–µ–¥–ª–∞–π–Ω (—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è)
        suggested_deadline = open_date + timedelta(days=7)
        suggested_deadline = suggested_deadline.replace(hour=23, minute=59, second=59)
        deadline_str = suggested_deadline.strftime('%d.%m.%Y %H:%M')
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress = "üü¢üü¢üü¢üü¢üîò"
        
        await update.message.reply_text(
            f"‚úÖ **–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!**\n"
            f"üìÖ *{open_date.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö')}*\n\n"
            f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress} (4/5)\n\n"
            f"‚è∞ **–®–∞–≥ 5/5:** –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω\n"
            f"üí° *–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –¥–µ–¥–ª–∞–π–Ω: {deadline_str}*\n\n"
            f"üìã **–í–∞—Ä–∏–∞–Ω—Ç—ã –≤–≤–æ–¥–∞:**\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π: `–∞–≤—Ç–æ` –∏–ª–∏ `auto`\n"
            f"‚Ä¢ –†—É—á–Ω–æ–π –≤–≤–æ–¥: `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n"
            f"‚Ä¢ –ó–∞–≤—Ç—Ä–∞ –≤ 23:59: `–∑–∞–≤—Ç—Ä–∞`\n"
            f"‚Ä¢ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é: `–Ω–µ–¥–µ–ª—è`\n"
            f"‚Ä¢ –ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞: `–Ω–µ—Ç`"
        )
        return ADDING_TASK_DEADLINE

    async def handle_add_task_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–µ–¥–ª–∞–π–Ω–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ"""
        if not await self._check_admin_access(update):
            return ConversationHandler.END
        
        deadline_str = update.message.text.strip().lower()
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–≤–æ–¥–∞ –¥–µ–¥–ª–∞–π–Ω–∞
            if deadline_str in ['–∞–≤—Ç–æ', 'auto']:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–¥–ª–∞–π–Ω: —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
                open_date = context.user_data['adding_task'].get('open_date', datetime.now(self.moscow_tz))
                deadline = open_date + timedelta(days=7)
                deadline = deadline.replace(hour=23, minute=59, second=59)
            elif deadline_str in ['–∑–∞–≤—Ç—Ä–∞', 'tomorrow']:
                deadline = datetime.now(self.moscow_tz).replace(hour=23, minute=59, second=59) + timedelta(days=1)
            elif deadline_str in ['–Ω–µ–¥–µ–ª—è', 'week']:
                deadline = datetime.now(self.moscow_tz) + timedelta(weeks=1)
                deadline = deadline.replace(hour=23, minute=59, second=59)
            elif deadline_str in ['–Ω–µ—Ç', 'no', '-']:
                deadline = None
            else:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                try:
                    deadline = datetime.strptime(deadline_str, '%d.%m.%Y %H:%M')
                    deadline = self.moscow_tz.localize(deadline)
                except ValueError:
                    # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
                    try:
                        deadline = datetime.strptime(deadline_str, '%d.%m.%Y')
                        deadline = self.moscow_tz.localize(deadline.replace(hour=23, minute=59))
                    except ValueError:
                        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –≤ –±—É–¥—É—â–µ–º
                if deadline and deadline <= datetime.now(self.moscow_tz):
                    await update.message.reply_text(
                        "‚ùå **–î–µ–¥–ª–∞–π–Ω –≤ –ø—Ä–æ—à–ª–æ–º**\n\n"
                        "–î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                    )
                    return ADDING_TASK_DEADLINE
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –Ω–µ —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è
                open_date = context.user_data['adding_task'].get('open_date')
                if deadline and open_date and deadline <= open_date:
                    await update.message.reply_text(
                        "‚ùå **–î–µ–¥–ª–∞–π–Ω —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è**\n\n"
                        "–î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞–Ω–∏—è.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                    )
                    return ADDING_TASK_DEADLINE
                    
        except ValueError as e:
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 23:59)\n"
                "‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì` (–≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 23:59)\n"
                "‚Ä¢ `–∞–≤—Ç–æ` - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç\n"
                "‚Ä¢ `–∑–∞–≤—Ç—Ä–∞` - –∑–∞–≤—Ç—Ä–∞ –≤ 23:59\n"
                "‚Ä¢ `–Ω–µ–¥–µ–ª—è` - —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é\n"
                "‚Ä¢ `–Ω–µ—Ç` - –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"
            )
            return ADDING_TASK_DEADLINE
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        task_data = context.user_data['adding_task']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        preview_text = self._generate_task_preview(task_data, deadline)
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="confirm_create_task")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_task_preview")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="tasks_menu")]
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data['adding_task']['deadline'] = deadline
        
        await update.message.reply_text(
            preview_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return ADDING_TASK_DEADLINE

    def _generate_task_preview(self, task_data: dict, deadline: datetime) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏—è"""
        progress = "üü¢üü¢üü¢üü¢üü¢"
        
        open_date = task_data.get('open_date', datetime.now(self.moscow_tz))
        is_open = open_date <= datetime.now(self.moscow_tz)
        
        preview = (
            f"üìã **–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –ó–ê–î–ê–ù–ò–Ø**\n\n"
            f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress} (5/5) ‚úÖ\n\n"
            f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:**\n{task_data['title']}\n\n"
            f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{task_data['description']}\n\n"
            f"üîó **–°—Å—ã–ª–∫–∞:**\n{task_data['link'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            f"üìÖ **–û—Ç–∫—Ä—ã—Ç–∏–µ:**\n{open_date.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö')}\n\n"
            f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:**\n{deadline.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö') if deadline else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
            f"üü¢ **–°—Ç–∞—Ç—É—Å:** {'–û—Ç–∫—Ä—ã—Ç–æ' if is_open else '–û–∂–∏–¥–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è'}\n\n"
            f"üéØ **–ì–æ—Ç–æ–≤–æ –∫ —Å–æ–∑–¥–∞–Ω–∏—é!**\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è."
        )
        
        return preview



    def _validate_url(self, url: str) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç URL"""
        if not url:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Telegram –∫–∞–Ω–∞–ª—ã/–±–æ—Ç—ã
        if url.startswith('@'):
            return len(url) > 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP/HTTPS
        if url.startswith(('http://', 'https://')):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ t.me —Å—Å—ã–ª–∫–∏
        if url.startswith('t.me/'):
            return True
        
        return False

    def _check_task_title_exists(self, title: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º"""
        try:
            with self.db._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT id FROM tasks WHERE title = ?', (title,))
                return cursor.fetchone() is not None
        except Exception:
            return False

    async def _apply_task_template(self, update: Update, context: ContextTypes.DEFAULT_TYPE, template_type: str):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω –∑–∞–¥–∞–Ω–∏—è"""
        templates = {
            'observation': {
                'title': '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ',
                'description': '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø—Ä–∏—Ä–æ–¥–æ–π –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏.',
                'link': None
            },
            'action': {
                'title': '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                'description': '–°–æ–≤–µ—Ä—à–∏—Ç–µ –æ–¥–Ω–æ –ø–æ–ª–µ–∑–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–±–æ—Ä–∫–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏, –ø–æ—Å–∞–¥–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π –∏–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç—Ö–æ–¥–æ–≤.',
                'link': None
            },
            'research': {
                'title': '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥—ã',
                'description': '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ. –ò–∑—É—á–∏—Ç–µ –µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.',
                'link': None
            }
        }
        
        template = templates.get(template_type)
        if not template:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω!")
            return ADDING_TASK_TITLE
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        current_date = datetime.now(self.moscow_tz)
        template['title'] = f"{template['title']} - {current_date.strftime('%d.%m.%Y')}"
        
        context.user_data['adding_task'] = template.copy()
        context.user_data['adding_task']['open_date'] = current_date
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω (—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é)
        deadline = current_date + timedelta(days=7)
        deadline = deadline.replace(hour=23, minute=59, second=59)
        context.user_data['adding_task']['deadline'] = deadline
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        preview_text = self._generate_task_preview(context.user_data['adding_task'], deadline)
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="confirm_create_task")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_task_preview")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="tasks_menu")]
        ]
        
        await update.message.reply_text(
            f"üéØ **–®–∞–±–ª–æ–Ω '{template_type}' –ø—Ä–∏–º–µ–Ω–µ–Ω!**\n\n{preview_text}",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return ADDING_TASK_DEADLINE

    async def _show_tasks_list(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π"""
        tasks = self.db.get_all_tasks()
        
        if not tasks:
            text = "üìù **–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç**\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!"
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="add_task")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        else:
            text = f"üìù **–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π** (–≤—Å–µ–≥–æ: {len(tasks)})\n\n"
            
            keyboard = []
            for task_id, title, description, link, is_open in tasks:
                status_emoji = "üü¢" if is_open else "üìÅ"
                short_title = title[:30] + "..." if len(title) > 30 else title
                
                keyboard.append([InlineKeyboardButton(
                    f"{status_emoji} {short_title}",
                    callback_data=f"task_{task_id}"
                )])
            
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="add_task")])
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _handle_task_action(self, query, context, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º"""
        task_id = int(data.split('_')[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, title, description, link, is_open, week_number, deadline, open_date
                FROM tasks WHERE id = ?
            ''', (task_id,))
            task = cursor.fetchone()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é
            cursor.execute('SELECT COUNT(*) FROM submissions WHERE task_id = ?', (task_id,))
            submissions_count = cursor.fetchone()[0]
        
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        task_id, title, description, link, is_open, week_number, deadline, open_date = task
        
        status = "üü¢ –û—Ç–∫—Ä—ã—Ç–æ" if is_open else "üìÅ –ê—Ä—Ö–∏–≤"
        deadline_str = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        if deadline:
            deadline_dt = datetime.fromisoformat(deadline)
            deadline_str = deadline_dt.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö')
        
        open_date_str = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        if open_date:
            open_date_dt = datetime.fromisoformat(open_date)
            open_date_str = open_date_dt.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö')
        
        text = (
            f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏**\n\n"
            f"üÜî **ID:** {task_id}\n"
            f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}\n"
            f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üîó **–°—Å—ã–ª–∫–∞:** {link or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üìÖ **–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è:** {open_date_str}\n"
            f"üìÖ **–ù–µ–¥–µ–ª—è:** {week_number or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} *(—É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –ø–æ–ª–µ)*\n"
            f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {deadline_str}\n"
            f"üìä **–°—Ç–∞—Ç—É—Å:** {status}\n"
            f"üì§ **–û—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ:** {submissions_count}"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_task_{task_id}")],
            [InlineKeyboardButton("üì§ –û—Ç—á–µ—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–∏—é", callback_data=f"task_reports_{task_id}")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"toggle_task_{task_id}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_task_{task_id}")],
            [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="list_tasks")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_pending_reports(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT s.id, s.user_id, s.submission_date, s.submission_type, s.content, 
                       s.file_id, s.is_on_time, t.title, u.first_name, u.last_name
                FROM submissions s
                JOIN tasks t ON s.task_id = t.id
                LEFT JOIN users u ON s.user_id = u.user_id
                WHERE s.status = 'pending'
                ORDER BY s.submission_date ASC
                LIMIT 10
            ''')
            reports = cursor.fetchall()
        
        if not reports:
            text = "‚úÖ **–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏**"
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="pending_reports")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        else:
            text = f"‚è≥ **–û—Ç—á–µ—Ç—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏** (–ø–æ–∫–∞–∑–∞–Ω–æ: {len(reports)})\n\n"
            
            keyboard = []
            for report in reports:
                submission_id, user_id, date, sub_type, content, file_id, is_on_time, task_title, first_name, last_name = report
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                date_obj = datetime.fromisoformat(date.replace('Z', '+00:00'))
                formatted_date = date_obj.strftime("%d.%m %H:%M")
                
                # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_name = f"{first_name or ''} {last_name or ''}".strip() or f"ID{user_id}"
                
                # –°—Ç–∞—Ç—É—Å –≤—Ä–µ–º–µ–Ω–∏
                time_status = "‚è∞" if not is_on_time else "‚úÖ"
                
                # –¢–∏–ø –æ—Ç—á–µ—Ç–∞
                type_emoji = {"text": "üìù", "photo": "üì∏", "video": "üé•", "document": "üìÑ"}.get(sub_type, "üìù")
                
                button_text = f"{type_emoji}{time_status} {user_name} ‚Ä¢ {formatted_date}"
                keyboard.append([InlineKeyboardButton(
                    button_text[:50],
                    callback_data=f"report_{submission_id}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="pending_reports")])
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _handle_report_action(self, query, context, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç—á–µ—Ç–æ–º"""
        submission_id = int(data.split('_')[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á–µ—Ç–µ
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT s.id, s.user_id, s.task_id, s.submission_date, s.submission_type, 
                       s.content, s.file_id, s.status, s.is_on_time,
                       t.title, t.description,
                       u.first_name, u.last_name, u.username
                FROM submissions s
                JOIN tasks t ON s.task_id = t.id
                LEFT JOIN users u ON s.user_id = u.user_id
                WHERE s.id = ?
            ''', (submission_id,))
            report = cursor.fetchone()
        
        if not report:
            await query.edit_message_text("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        (sub_id, user_id, task_id, date, sub_type, content, file_id, status, 
         is_on_time, task_title, task_desc, first_name, last_name, username) = report
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        date_obj = datetime.fromisoformat(date.replace('Z', '+00:00'))
        formatted_date = date_obj.strftime("%d.%m.%Y –≤ %H:%M –ú–°–ö")
        
        user_name = f"{first_name or ''} {last_name or ''}".strip() or f"ID{user_id}"
        if username:
            user_name += f" (@{username})"
        
        time_status = "‚è∞ –° –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º" if not is_on_time else "‚úÖ –í —Å—Ä–æ–∫"
        status_text = {"pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏", "approved": "‚úÖ –û–¥–æ–±—Ä–µ–Ω", "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω"}.get(status, status)
        type_text = {"text": "üìù –¢–µ–∫—Å—Ç", "photo": "üì∏ –§–æ—Ç–æ", "video": "üé• –í–∏–¥–µ–æ", "document": "üìÑ –î–æ–∫—É–º–µ–Ω—Ç"}.get(sub_type, sub_type)
        
        text = (
            f"üì§ **–û—Ç—á–µ—Ç #{sub_id}**\n\n"
            f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_name}\n"
            f"üìã **–ó–∞–¥–∞–Ω–∏–µ:** {task_title}\n"
            f"üìÖ **–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:** {formatted_date}\n"
            f"üìù **–¢–∏–ø:** {type_text}\n"
            f"‚è∞ **–°—Ç–∞—Ç—É—Å –≤—Ä–µ–º–µ–Ω–∏:** {time_status}\n"
            f"üìä **–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:** {status_text}\n\n"
            f"üí¨ **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:**\n{content[:500]}{'...' if len(content) > 500 else ''}"
        )
        
        keyboard = []
        
        if status == 'pending':
            keyboard.extend([
                [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{sub_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{sub_id}")]
            ])
        
        if file_id:
            keyboard.append([InlineKeyboardButton("üìé –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"show_file_{sub_id}")])
        
        keyboard.extend([
            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"user_profile_{user_id}")],
            [InlineKeyboardButton("üìã –ó–∞–¥–∞–Ω–∏–µ", callback_data=f"task_{task_id}")],
            [InlineKeyboardButton("‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ", callback_data="pending_reports")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _approve_report(self, query, data):
        """–û–¥–æ–±—Ä—è–µ—Ç –æ—Ç—á–µ—Ç"""
        submission_id = int(data.split('_')[1])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE submissions SET status = 'approved' WHERE id = ?
            ''', (submission_id,))
            conn.commit()
        
        await query.answer("‚úÖ –û—Ç—á–µ—Ç –æ–¥–æ–±—Ä–µ–Ω!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self._handle_report_action(query, None, f"report_{submission_id}")

    async def _reject_report(self, query, data):
        """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –æ—Ç—á–µ—Ç"""
        submission_id = int(data.split('_')[1])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE submissions SET status = 'rejected' WHERE id = ?
            ''', (submission_id,))
            conn.commit()
        
        await query.answer("‚ùå –û—Ç—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self._handle_report_action(query, None, f"report_{submission_id}")

    async def _show_potential_reports(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        reports = self.db.get_potential_reports()
        
        if not reports:
            text = "‚úÖ **–ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤**"
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="potential_reports")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        else:
            text = f"üîç **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã** (–Ω–∞–π–¥–µ–Ω–æ: {len(reports)})\n\n"
            text += "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—á–µ—Ç–∞–º–∏, –Ω–æ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è.\n\n"
            
            keyboard = []
            for report_id, user_id, message_data, message_type, received_date in reports[:10]:
                try:
                    data = json.loads(message_data)
                    content = data.get('content', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ')
                    msg_type = data.get('type', 'text')
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                    date_obj = datetime.fromisoformat(received_date.replace('Z', '+00:00'))
                    formatted_date = date_obj.strftime("%d.%m.%Y –≤ %H:%M –ú–°–ö")
                    
                    type_emoji = {"text": "üìù", "photo": "üì∏", "video": "üé•", "document": "üìÑ"}.get(msg_type, "üìù")
                    button_text = f"{type_emoji} ID{user_id} ‚Ä¢ {formatted_date}"
                    
                    keyboard.append([InlineKeyboardButton(
                        button_text,
                        callback_data=f"potential_{report_id}"
                    )])
                    
                except json.JSONDecodeError:
                    continue
            
            if len(reports) > 10:
                keyboard.append([InlineKeyboardButton(f"... –∏ –µ—â–µ {len(reports) - 10}", callback_data="potential_reports_all")])
            
            keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="potential_reports")])
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_all_reports(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT s.id, s.user_id, s.submission_date, s.submission_type, s.status, 
                       s.is_on_time, t.title, u.first_name, u.last_name
                FROM submissions s
                JOIN tasks t ON s.task_id = t.id
                LEFT JOIN users u ON s.user_id = u.user_id
                ORDER BY s.submission_date DESC
                LIMIT 15
            ''')
            reports = cursor.fetchall()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cursor.execute('SELECT COUNT(*) FROM submissions')
            total_count = cursor.fetchone()[0]
        
        if not reports:
            text = "üì§ **–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ**"
            keyboard = [
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        else:
            text = f"üì§ **–í—Å–µ –æ—Ç—á–µ—Ç—ã** (–ø–æ–∫–∞–∑–∞–Ω–æ: {len(reports)} –∏–∑ {total_count})\n\n"
            
            keyboard = []
            for report in reports:
                submission_id, user_id, date, sub_type, status, is_on_time, task_title, first_name, last_name = report
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                date_obj = datetime.fromisoformat(date.replace('Z', '+00:00'))
                formatted_date = date_obj.strftime("%d.%m %H:%M")
                
                # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_name = f"{first_name or ''} {last_name or ''}".strip() or f"ID{user_id}"
                
                # –°—Ç–∞—Ç—É—Å
                status_emoji = {"pending": "‚è≥", "approved": "‚úÖ", "rejected": "‚ùå"}.get(status, "‚ùì")
                time_emoji = "‚è∞" if not is_on_time else "‚úÖ"
                type_emoji = {"text": "üìù", "photo": "üì∏", "video": "üé•", "document": "üìÑ"}.get(sub_type, "üìù")
                
                button_text = f"{type_emoji}{status_emoji}{time_emoji} {user_name} ‚Ä¢ {formatted_date}"
                keyboard.append([InlineKeyboardButton(
                    button_text[:50],
                    callback_data=f"report_{submission_id}"
                )])
            
            if total_count > 15:
                keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="all_reports_next")])
            
            keyboard.append([InlineKeyboardButton("üì§ –û—Ç—á–µ—Ç—ã", callback_data="reports_menu")])
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _start_edit_task(self, query, context, data):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
        task_id = int(data.split('_')[2])  # edit_task_123
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, title, description, link, is_open, week_number, deadline, open_date
                FROM tasks WHERE id = ?
            ''', (task_id,))
            task = cursor.fetchone()
        
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        task_id, title, description, link, is_open, week_number, deadline, open_date = task
        
        status = "üü¢ –û—Ç–∫—Ä—ã—Ç–æ" if is_open else "üìÅ –ó–∞–∫—Ä—ã—Ç–æ"
        deadline_str = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        if deadline:
            deadline_dt = datetime.fromisoformat(deadline)
            deadline_str = deadline_dt.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö')
        
        open_date_str = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        if open_date:
            open_date_dt = datetime.fromisoformat(open_date)
            open_date_str = open_date_dt.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö')
        
        text = (
            f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è #{task_id}**\n\n"
            f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}\n"
            f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üîó **–°—Å—ã–ª–∫–∞:** {link or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üìÖ **–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è:** {open_date_str}\n"
            f"üìÖ **–ù–µ–¥–µ–ª—è:** {week_number or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} *(—É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –ø–æ–ª–µ)*\n"
            f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {deadline_str}\n"
            f"üìä **–°—Ç–∞—Ç—É—Å:** {status}\n\n"
            f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{task_id}")],
            [InlineKeyboardButton("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc_{task_id}")],
            [InlineKeyboardButton("üîó –°—Å—ã–ª–∫—É", callback_data=f"edit_link_{task_id}")],
            [InlineKeyboardButton("üìÖ –î–∞—Ç—É –æ—Ç–∫—Ä—ã—Ç–∏—è", callback_data=f"edit_open_date_{task_id}")],
            [InlineKeyboardButton("‚è∞ –î–µ–¥–ª–∞–π–Ω", callback_data=f"edit_deadline_{task_id}")],
            [InlineKeyboardButton(f"üìä –°—Ç–∞—Ç—É—Å ({status})", callback_data=f"toggle_task_{task_id}")],
            [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—é", callback_data=f"task_{task_id}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_edit_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        if not await self._check_admin_access(update):
            return
        
        new_title = update.message.text.strip()
        if len(new_title) < 5:
            await update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        task_id = context.user_data.get('editing_task_id')
        if not task_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            context.user_data.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            with self.db._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE tasks SET title = ? WHERE id = ?', (new_title, task_id))
                conn.commit()
            
            keyboard = [
                [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—é", callback_data=f"task_{task_id}")],
                [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="list_tasks")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            await update.message.reply_text(
                f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!**\n\n"
                f"üìù **–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:** {new_title}",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {str(e)}"
            )

    async def _start_edit_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        task_id = int(data.split('_')[2])  # edit_desc_123
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['editing_task_id'] = task_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT description FROM tasks WHERE id = ?', (task_id,))
            task = cursor.fetchone()
        
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return ConversationHandler.END
        
        current_description = task[0] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        
        text = (
            f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è #{task_id}**\n\n"
            f"üìÑ **–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:** {current_description}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
            "üí° _–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ_ `/cancel`"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"task_{task_id}")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_state'] = EDITING_TASK_DESCRIPTION

    async def handle_edit_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        if not await self._check_admin_access(update):
            return
        
        new_description = update.message.text.strip()
        task_id = context.user_data.get('editing_task_id')
        
        if not task_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            context.user_data.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            with self.db._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE tasks SET description = ? WHERE id = ?', (new_description, task_id))
                conn.commit()
            
            keyboard = [
                [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—é", callback_data=f"task_{task_id}")],
                [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="list_tasks")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            await update.message.reply_text(
                f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!**\n\n"
                f"üìÑ **–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:** {new_description}",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}"
            )

    async def _start_edit_title(self, update, context):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        task_id = int(data.split('_')[2])  # edit_title_123
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['editing_task_id'] = task_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT title FROM tasks WHERE id = ?', (task_id,))
            task = cursor.fetchone()
        
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return ConversationHandler.END
        
        current_title = task[0] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        
        text = (
            f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è #{task_id}**\n\n"
            f"üìù **–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:** {current_title}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
            "üí° _–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ_ `/cancel`"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"task_{task_id}")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_state'] = EDITING_TASK_TITLE

    async def _start_edit_link(self, update, context):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∑–∞–¥–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        task_id = int(data.split('_')[2])  # edit_link_123
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['editing_task_id'] = task_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT link FROM tasks WHERE id = ?', (task_id,))
            task = cursor.fetchone()
        
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return ConversationHandler.END
        
        current_link = task[0] or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        text = (
            f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∑–∞–¥–∞–Ω–∏—è #{task_id}**\n\n"
            f"üîó **–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞:** {current_link}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å—Å—ã–ª–∫—É):"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"task_{task_id}")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_state'] = EDITING_TASK_LINK

    async def handle_edit_link(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –∑–∞–¥–∞–Ω–∏—è"""
        if not await self._check_admin_access(update):
            return
        
        new_link = update.message.text.strip()
        if new_link.lower() in ['–Ω–µ—Ç', 'no', '-', '—É–±—Ä–∞—Ç—å']:
            new_link = None
        
        task_id = context.user_data.get('editing_task_id')
        if not task_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            context.user_data.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            with self.db._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE tasks SET link = ? WHERE id = ?', (new_link, task_id))
                conn.commit()
            
            keyboard = [
                [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—é", callback_data=f"task_{task_id}")],
                [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="list_tasks")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            await update.message.reply_text(
                f"‚úÖ **–°—Å—ã–ª–∫–∞ –∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!**\n\n"
                f"üîó **–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:** {new_link or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {str(e)}"
            )

    async def _toggle_task_status(self, query, data):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è (–æ—Ç–∫—Ä—ã—Ç–æ/–∑–∞–∫—Ä—ã—Ç–æ)"""
        task_id = int(data.split('_')[2])  # toggle_task_123
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            cursor.execute('SELECT is_open FROM tasks WHERE id = ?', (task_id,))
            result = cursor.fetchone()
            
            if not result:
                await query.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                return
            
            current_status = result[0]
            new_status = not current_status
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            cursor.execute('UPDATE tasks SET is_open = ? WHERE id = ?', (new_status, task_id))
            conn.commit()
        
        status_text = "–æ—Ç–∫—Ä—ã—Ç–æ" if new_status else "–∑–∞–∫—Ä—ã—Ç–æ"
        await query.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {status_text}!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–¥–∞–Ω–∏—è
        await self._handle_task_action(query, None, f"task_{task_id}")

    async def _delete_task(self, query, data):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        task_id = int(data.split('_')[2])  # delete_task_123
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç—á–µ—Ç–æ–≤
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('SELECT title FROM tasks WHERE id = ?', (task_id,))
            task = cursor.fetchone()
            
            if not task:
                await query.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                return
            
            cursor.execute('SELECT COUNT(*) FROM submissions WHERE task_id = ?', (task_id,))
            reports_count = cursor.fetchone()[0]
        
        title = task[0]
        
        text = (
            f"üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è**\n\n"
            f"üìù **–ó–∞–¥–∞–Ω–∏–µ:** {title}\n"
            f"üì§ **–û—Ç—á–µ—Ç–æ–≤:** {reports_count}\n\n"
            f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n"
            f"–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{task_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"task_{task_id}")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _confirm_delete_task(self, query, data):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
        task_id = int(data.split('_')[2])  # confirm_delete_123
        
        try:
            with self.db._get_connection() as conn:
                cursor = conn.cursor()
                
                # –£–¥–∞–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ –æ—Ç—á–µ—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–∏—é
                cursor.execute('DELETE FROM submissions WHERE task_id = ?', (task_id,))
                
                # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º–æ –∑–∞–¥–∞–Ω–∏–µ
                cursor.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
                
                conn.commit()
            
            await query.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π
            await self._show_tasks_list(query)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!")
            await self._handle_task_action(query, None, f"task_{task_id}")

    async def _show_task_reports(self, query, data):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é"""
        task_id = int(data.split('_')[2])  # task_reports_123
        
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
            cursor.execute('SELECT title FROM tasks WHERE id = ?', (task_id,))
            task = cursor.fetchone()
            
            if not task:
                await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–∏—é
            cursor.execute('''
                SELECT s.id, s.user_id, s.submission_date, s.submission_type, s.status, 
                       s.is_on_time, u.first_name, u.last_name
                FROM submissions s
                LEFT JOIN users u ON s.user_id = u.user_id
                WHERE s.task_id = ?
                ORDER BY s.submission_date DESC
                LIMIT 10
            ''', (task_id,))
            reports = cursor.fetchall()
        
        task_title = task[0]
        
        if not reports:
            text = f"üìã **–û—Ç—á–µ—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–∏—é**\n{task_title}\n\nüì≠ –û—Ç—á–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
            keyboard = [
                [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—é", callback_data=f"task_{task_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        else:
            text = f"üìã **–û—Ç—á–µ—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–∏—é** ({len(reports)})\n{task_title}\n\n"
            
            keyboard = []
            for report in reports:
                submission_id, user_id, date, sub_type, status, is_on_time, first_name, last_name = report
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                date_obj = datetime.fromisoformat(date.replace('Z', '+00:00'))
                formatted_date = date_obj.strftime("%d.%m %H:%M")
                
                # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_name = f"{first_name or ''} {last_name or ''}".strip() or f"ID{user_id}"
                
                # –°—Ç–∞—Ç—É—Å—ã
                status_emoji = {"pending": "‚è≥", "approved": "‚úÖ", "rejected": "‚ùå"}.get(status, "‚ùì")
                time_emoji = "‚è∞" if not is_on_time else "‚úÖ"
                type_emoji = {"text": "üìù", "photo": "üì∏", "video": "üé•", "document": "üìÑ"}.get(sub_type, "üìù")
                
                button_text = f"{type_emoji}{status_emoji}{time_emoji} {user_name} ‚Ä¢ {formatted_date}"
                keyboard.append([InlineKeyboardButton(
                    button_text[:50],
                    callback_data=f"report_{submission_id}"
                )])
            
            keyboard.append([InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—é", callback_data=f"task_{task_id}")])
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_user_profile(self, query, data):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = int(data.split('_')[2])  # user_profile_123
        
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            cursor.execute('''
                SELECT user_id, username, telegram_first_name, telegram_last_name,
                       first_name, last_name, participation_type, family_members_count,
                       children_info, registration_completed, registration_date
                FROM users WHERE user_id = ?
            ''', (user_id,))
            user = cursor.fetchone()
            
            if not user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('SELECT COUNT(*) FROM submissions WHERE user_id = ?', (user_id,))
            total_submissions = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM submissions WHERE user_id = ? AND status = "approved"', (user_id,))
            approved_submissions = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM submissions WHERE user_id = ? AND is_on_time = TRUE', (user_id,))
            on_time_submissions = cursor.fetchone()[0]
        
        (uid, username, tg_first, tg_last, first_name, last_name, participation_type,
         family_count, children_info, registration_completed, reg_date) = user
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        full_name = f"{first_name or ''} {last_name or ''}".strip() or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        tg_name = f"{tg_first or ''} {tg_last or ''}".strip() or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        username_str = f"@{username}" if username else "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        reg_status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞" if registration_completed else "‚ùå –ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        participation = {"individual": "üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ", "family": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω–æ–µ"}.get(participation_type, participation_type)
        
        if reg_date:
            reg_date_obj = datetime.fromisoformat(reg_date.replace('Z', '+00:00'))
            formatted_reg_date = reg_date_obj.strftime("%d.%m.%Y –≤ %H:%M")
        else:
            formatted_reg_date = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        text = (
            f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            f"üÜî **ID:** {uid}\n"
            f"üë§ **–ò–º—è –≤ Telegram:** {tg_name}\n"
            f"üì± **Username:** {username_str}\n"
            f"üìù **–ü–æ–ª–Ω–æ–µ –∏–º—è:** {full_name}\n"
            f"üè† **–¢–∏–ø —É—á–∞—Å—Ç–∏—è:** {participation}\n"
            f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–µ–º—å–µ:** {family_count or 1}\n"
            f"üë∂ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—Ç—è—Ö:** {children_info or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {reg_status}\n"
            f"üìÖ **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {formatted_reg_date}\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {total_submissions}\n"
            f"   ‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {approved_submissions}\n"
            f"   ‚Ä¢ –í —Å—Ä–æ–∫: {on_time_submissions}\n"
            f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {approved_submissions/max(total_submissions, 1)*100:.1f}%"
        )
        
        keyboard = [
            [InlineKeyboardButton("üì§ –û—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"user_reports_{user_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reports_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_user_reports(self, query, data):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = int(data.split('_')[2])  # user_reports_123
        
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('SELECT first_name, last_name FROM users WHERE user_id = ?', (user_id,))
            user = cursor.fetchone()
            
            if not user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            user_name = f"{user[0] or ''} {user[1] or ''}".strip() or f"ID{user_id}"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
                SELECT s.id, s.submission_date, s.submission_type, s.status, 
                       s.is_on_time, t.title
                FROM submissions s
                JOIN tasks t ON s.task_id = t.id
                WHERE s.user_id = ?
                ORDER BY s.submission_date DESC
                LIMIT 10
            ''', (user_id,))
            reports = cursor.fetchall()
        
        if not reports:
            text = f"üë§ **–û—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n{user_name}\n\nüì≠ –û—Ç—á–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
            keyboard = [
                [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data=f"user_profile_{user_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        else:
            text = f"üë§ **–û—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** ({len(reports)})\n{user_name}\n\n"
            
            keyboard = []
            for report in reports:
                submission_id, date, sub_type, status, is_on_time, task_title = report
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                date_obj = datetime.fromisoformat(date.replace('Z', '+00:00'))
                formatted_date = date_obj.strftime("%d.%m %H:%M")
                
                # –°—Ç–∞—Ç—É—Å—ã
                status_emoji = {"pending": "‚è≥", "approved": "‚úÖ", "rejected": "‚ùå"}.get(status, "‚ùì")
                time_emoji = "‚è∞" if not is_on_time else "‚úÖ"
                type_emoji = {"text": "üìù", "photo": "üì∏", "video": "üé•", "document": "üìÑ"}.get(sub_type, "üìù")
                
                button_text = f"{type_emoji}{status_emoji}{time_emoji} {task_title[:20]}... ‚Ä¢ {formatted_date}"
                keyboard.append([InlineKeyboardButton(
                    button_text[:50],
                    callback_data=f"report_{submission_id}"
                )])
            
            keyboard.append([InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data=f"user_profile_{user_id}")])
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _handle_export_data(self, query):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        text = (
            "üìä **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="export_users")],
            [InlineKeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="export_tasks")],
            [InlineKeyboardButton("üì§ –û—Ç—á–µ—Ç—ã", callback_data="export_submissions")],
            [InlineKeyboardButton("üìä –ü–æ–ª–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞", callback_data="export_full")],
            [InlineKeyboardButton("üîô –°–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é", callback_data="system_menu")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _handle_clear_logs(self, query):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤
        log_stats = self._get_log_stats()
        
        text = (
            "üßπ **–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤**\n\n"
            f"üìÇ **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:**\n"
            f"‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: {log_stats['potential_reports']}\n"
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ñ–ª–∞–π–Ω-—Å–æ–æ–±—â–µ–Ω–∏—è: {log_stats['processed_offline']}\n"
            f"‚Ä¢ –ó–∞–ø–∏—Å–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {log_stats['user_states']}\n"
            f"‚Ä¢ –°—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {log_stats['old_support_requests']}\n\n"
            f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö.\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—á–∏—Å—Ç–∫—É?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear_logs")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="system_menu")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _confirm_clear_logs(self, query):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤"""
        try:
            cleaned = self._perform_log_cleanup()
            
            text = (
                "‚úÖ **–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
                f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n"
                f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {cleaned['potential_reports']}\n"
                f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –æ—Ñ–ª–∞–π–Ω-—Å–æ–æ–±—â–µ–Ω–∏–π: {cleaned['offline_messages']}\n"
                f"‚Ä¢ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: {cleaned['old_states']}\n"
                f"‚Ä¢ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {cleaned['support_requests']}\n\n"
                f"üíæ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞**"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")
            text = (
                "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ!**\n\n"
                f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {str(e)}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            )
        
        keyboard = [
            [InlineKeyboardButton("üîß –°–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é", callback_data="system_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _handle_specific_export(self, query, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        export_type = data.split('_')[1]  # export_users -> users
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞
            file_path = await self._generate_export_file(export_type)
            
            if file_path:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                with open(file_path, 'rb') as file:
                    await query.message.reply_document(
                        document=file,
                        filename=os.path.basename(file_path),
                        caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö: {self._get_export_type_name(export_type)}"
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(file_path)
                
                await query.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ {export_type}: {e}")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
        await self._handle_export_data(query)

    async def _send_local_file(self, query, file_path: str, caption: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            full_path = os.path.join("uploaded_files", file_path)
            
            if not os.path.exists(full_path):
                await query.message.reply_text(
                    "‚ùå *–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ*\n\n"
                    f"–§–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω\\.\n"
                    f"–ü—É—Ç—å: `{file_path}`",
                    parse_mode='MarkdownV2'
                )
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            file_extension = file_path.lower().split('.')[-1] if '.' in file_path else ''
            
            with open(full_path, 'rb') as file:
                if file_extension in ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'] or 'photos/' in file_path:
                    await query.message.reply_photo(
                        photo=file,
                        caption=caption,
                        parse_mode='Markdown'
                    )
                elif file_extension in ['mp4', 'avi', 'mov', 'mkv', 'webm'] or 'videos/' in file_path:
                    await query.message.reply_video(
                        video=file,
                        caption=caption,
                        parse_mode='Markdown'
                    )
                else:
                    await query.message.reply_document(
                        document=file,
                        caption=caption,
                        parse_mode='Markdown',
                        filename=os.path.basename(file_path)
                    )
            
            await query.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞!")
            return False

    async def _show_file(self, query, data):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∞–π–ª"""
        submission_id = int(data.split('_')[2])  # show_file_123
        
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT s.file_id, s.file_path, s.submission_type, s.content, 
                       u.first_name, u.last_name, t.title
                FROM submissions s
                LEFT JOIN users u ON s.user_id = u.user_id
                LEFT JOIN tasks t ON s.task_id = t.id
                WHERE s.id = ?
            ''', (submission_id,))
            result = cursor.fetchone()
        
        if not result:
            await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        file_id, file_path, submission_type, content, first_name, last_name, task_title = result
        
        if not file_id and not file_path:
            await query.answer("‚ùå –ö —ç—Ç–æ–º—É –æ—Ç—á–µ—Ç—É –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª!")
            return
        
        user_name = f"{first_name or ''} {last_name or ''}".strip() or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        caption = f"üìÅ **–§–∞–π–ª –∫ –æ—Ç—á–µ—Ç—É**\n\nüë§ **–û—Ç:** {user_name}\nüìã **–ó–∞–¥–∞–Ω–∏–µ:** {task_title}\n\nüí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {content[:100]}{'...' if len(content) > 100 else ''}"
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –ø–æ—Ç–æ–º file_id
        if file_path:
            success = await self._send_local_file(query, file_path, caption)
            if success:
                return
        
        # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É —Å file_id
        if file_id:
            try:
                if submission_type == 'photo':
                    await query.message.reply_photo(
                        photo=file_id,
                        caption=caption,
                        parse_mode='Markdown'
                    )
                elif submission_type == 'video':
                    await query.message.reply_video(
                        video=file_id,
                        caption=caption,
                        parse_mode='Markdown'
                    )
                elif submission_type == 'document':
                    await query.message.reply_document(
                        document=file_id,
                        caption=caption,
                        parse_mode='Markdown'
                    )
                else:
                    await query.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞!")
                    return
                    
                await query.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—á–µ—Ä–µ–∑ file_id)!")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_id}: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ Telegram
                error_message = str(e).lower()
                if "wrong file identifier" in error_message or "file not found" in error_message:
                    await query.answer("‚ùå –§–∞–π–ª –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—É—Å—Ç–∞—Ä–µ–ª file_id)")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ
                    await query.message.reply_text(
                        "‚ö†Ô∏è *–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω*\n\n"
                        f"–§–∞–π–ª –∫ –æ—Ç—á–µ—Ç—É ‚Ññ{submission_id} –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω\\.\n"
                        "–≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–≥–¥–∞ file\\_id —É—Å—Ç–∞—Ä–µ–≤–∞–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ Telegram\\.\n\n"
                        "üí° *–†–µ—à–µ–Ω–∏–µ:* –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ\\.",
                        parse_mode='MarkdownV2'
                    )
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞!")
        else:
            await query.answer("‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")

    async def _handle_potential_report(self, query, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        report_id = int(data.split('_')[1])  # potential_123
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º –æ—Ç—á–µ—Ç–µ
        reports = self.db.get_potential_reports()
        potential_report = None
        
        for report in reports:
            if report[0] == report_id:  # report[0] —ç—Ç–æ ID
                potential_report = report
                break
        
        if not potential_report:
            await query.edit_message_text("‚ùå –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        report_id, user_id, message_data, message_type, received_date = potential_report
        
        try:
            data_dict = json.loads(message_data)
            content = data_dict.get('content', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ')
            msg_type = data_dict.get('type', 'text')
            file_id = data_dict.get('file_id')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_obj = datetime.fromisoformat(received_date.replace('Z', '+00:00'))
            formatted_date = date_obj.strftime("%d.%m.%Y –≤ %H:%M –ú–°–ö")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            with self.db._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT first_name, last_name, username FROM users WHERE user_id = ?', (user_id,))
                user_info = cursor.fetchone()
            
            if user_info:
                first_name, last_name, username = user_info
                user_name = f"{first_name or ''} {last_name or ''}".strip() or f"ID{user_id}"
                if username:
                    user_name += f" (@{username})"
            else:
                user_name = f"ID{user_id}"
            
            type_emoji = {"text": "üìù", "photo": "üì∏", "video": "üé•", "document": "üìÑ"}.get(msg_type, "üìù")
            
            text = (
                f"üîç **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç #{report_id}**\n\n"
                f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_name}\n"
                f"üìÖ **–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è:** {formatted_date}\n"
                f"üìù **–¢–∏–ø:** {type_emoji} {msg_type.title()}\n\n"
                f"üí¨ **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:**\n{content[:500]}{'...' if len(content) > 500 else ''}"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
            with self.db._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT id, title FROM tasks WHERE is_open = TRUE ORDER BY id DESC LIMIT 5')
                open_tasks = cursor.fetchall()
            
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∑–∞–¥–∞–Ω–∏—è–º
            if open_tasks:
                keyboard.append([InlineKeyboardButton("üìã –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –∑–∞–¥–∞–Ω–∏—é:", callback_data="dummy")])
                for task_id, task_title in open_tasks:
                    short_title = task_title[:30] + "..." if len(task_title) > 30 else task_title
                    keyboard.append([InlineKeyboardButton(
                        f"üìù {short_title}",
                        callback_data=f"assign_potential_{report_id}_{task_id}"
                    )])
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.extend([
                [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π", callback_data=f"mark_processed_{report_id}")],
                [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_potential_{report_id}")],
            ])
            
            if file_id:
                keyboard.append([InlineKeyboardButton("üìé –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"show_potential_file_{report_id}")])
            
            keyboard.extend([
                [InlineKeyboardButton("üîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã", callback_data="potential_reports")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await query.edit_message_text(
                text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except json.JSONDecodeError:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ {report_id}: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á–µ—Ç–∞.")

    def _get_log_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤"""
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
            cursor.execute("SELECT COUNT(*) FROM offline_messages WHERE message_type = 'potential_report' AND processed = FALSE")
            potential_reports = cursor.fetchone()[0]
            
            # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ñ–ª–∞–π–Ω-—Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
            cursor.execute("""
                SELECT COUNT(*) FROM offline_messages 
                WHERE processed = TRUE 
                AND received_date < date('now', '-30 days')
            """)
            processed_offline = cursor.fetchone()[0]
            
            # –ó–∞–ø–∏—Å–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
            cursor.execute("""
                SELECT COUNT(*) FROM user_states 
                WHERE last_updated < datetime('now', '-7 days')
            """)
            user_states = cursor.fetchone()[0]
            
            # –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
            cursor.execute("""
                SELECT COUNT(*) FROM support_requests 
                WHERE status = 'closed' 
                AND request_date < date('now', '-30 days')
            """)
            old_support_requests = cursor.fetchone()[0]
            
            return {
                'potential_reports': potential_reports,
                'processed_offline': processed_offline,
                'user_states': user_states,
                'old_support_requests': old_support_requests
            }

    def _perform_log_cleanup(self) -> Dict[str, int]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            
            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
            cursor.execute("DELETE FROM offline_messages WHERE message_type = 'potential_report' AND processed = TRUE")
            potential_reports = cursor.rowcount
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ñ–ª–∞–π–Ω-—Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            cursor.execute("DELETE FROM offline_messages WHERE processed = TRUE AND received_date < date('now', '-30 days')")
            offline_messages = cursor.rowcount
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
            cursor.execute("DELETE FROM user_states WHERE last_updated < datetime('now', '-7 days')")
            old_states = cursor.rowcount
            
            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            cursor.execute("UPDATE support_requests SET status = 'archived' WHERE status = 'closed' AND request_date < date('now', '-30 days')")
            support_requests = cursor.rowcount
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("VACUUM")
            
            conn.commit()
            
            return {
                'potential_reports': potential_reports,
                'offline_messages': offline_messages,
                'old_states': old_states,
                'support_requests': support_requests
            }

    async def _generate_export_file(self, export_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        import csv
        import tempfile
        
        timestamp = datetime.now(self.moscow_tz).strftime("%Y%m%d_%H%M%S")
        
        if export_type == "users":
            return await self._export_users_to_csv(timestamp)
        elif export_type == "tasks":
            return await self._export_tasks_to_csv(timestamp)
        elif export_type == "submissions":
            return await self._export_submissions_to_csv(timestamp)
        elif export_type == "full":
            return await self._export_full_data(timestamp)
        else:
            return None

    async def _export_users_to_csv(self, timestamp: str) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV"""
        import csv
        import tempfile
        
        filename = f"eco_bot_users_{timestamp}.csv"
        temp_path = os.path.join(tempfile.gettempdir(), filename)
        
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT user_id, username, telegram_first_name, telegram_last_name,
                       first_name, last_name, participation_type, family_members_count,
                       children_info, registration_completed, registration_date
                FROM users ORDER BY registration_date DESC
            """)
            users = cursor.fetchall()
        
        with open(temp_path, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow([
                'User ID', 'Username', 'Telegram First Name', 'Telegram Last Name',
                'First Name', 'Last Name', 'Participation Type', 'Family Members',
                'Children Info', 'Registration Completed', 'Registration Date'
            ])
            writer.writerows(users)
        
        return temp_path

    async def _export_tasks_to_csv(self, timestamp: str) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞–Ω–∏—è –≤ CSV"""
        import csv
        import tempfile
        
        filename = f"eco_bot_tasks_{timestamp}.csv"
        temp_path = os.path.join(tempfile.gettempdir(), filename)
        
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id, title, description, link, is_open, week_number, deadline, open_date
                FROM tasks ORDER BY id DESC
            """)
            tasks = cursor.fetchall()
        
        with open(temp_path, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow([
                'ID', 'Title', 'Description', 'Link', 'Is Open', 'Week Number', 'Deadline', 'Open Date'
            ])
            writer.writerows(tasks)
        
        return temp_path

    async def _export_submissions_to_csv(self, timestamp: str) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –≤ CSV"""
        import csv
        import tempfile
        
        filename = f"eco_bot_submissions_{timestamp}.csv"
        temp_path = os.path.join(tempfile.gettempdir(), filename)
        
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT s.id, s.user_id, s.task_id, s.submission_date, s.submission_type,
                       s.content, s.file_id, s.status, s.is_on_time, t.title, u.first_name, u.last_name
                FROM submissions s
                LEFT JOIN tasks t ON s.task_id = t.id
                LEFT JOIN users u ON s.user_id = u.user_id
                ORDER BY s.submission_date DESC
            """)
            submissions = cursor.fetchall()
        
        with open(temp_path, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow([
                'ID', 'User ID', 'Task ID', 'Submission Date', 'Type',
                'Content', 'File ID', 'Status', 'On Time', 'Task Title', 'First Name', 'Last Name'
            ])
            writer.writerows(submissions)
        
        return temp_path

    async def _export_full_data(self, timestamp: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ ZIP –∞—Ä—Ö–∏–≤–µ"""
        import zipfile
        import tempfile
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ CSV —Ñ–∞–π–ª—ã
        users_file = await self._export_users_to_csv(timestamp)
        tasks_file = await self._export_tasks_to_csv(timestamp)
        submissions_file = await self._export_submissions_to_csv(timestamp)
        
        # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
        zip_filename = f"eco_bot_full_export_{timestamp}.zip"
        zip_path = os.path.join(tempfile.gettempdir(), zip_filename)
        
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            zipf.write(users_file, os.path.basename(users_file))
            zipf.write(tasks_file, os.path.basename(tasks_file))
            zipf.write(submissions_file, os.path.basename(submissions_file))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            metadata = f"""–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≠–∫–æ-–±–æ—Ç–∞
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now(self.moscow_tz).strftime('%d.%m.%Y %H:%M:%S –ú–°–ö')}
–í–µ—Ä—Å–∏—è: 1.0

–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞:
- {os.path.basename(users_file)} - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- {os.path.basename(tasks_file)} - –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–π  
- {os.path.basename(submissions_file)} - –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–æ–≤

–ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8
–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å CSV: –∑–∞–ø—è—Ç–∞—è
"""
            zipf.writestr("README.txt", metadata.encode('utf-8'))
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ CSV —Ñ–∞–π–ª—ã
        os.remove(users_file)
        os.remove(tasks_file)
        os.remove(submissions_file)
        
        return zip_path

    def _get_export_type_name(self, export_type: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        names = {
            'users': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            'tasks': '–ó–∞–¥–∞–Ω–∏—è',
            'submissions': '–û—Ç—á–µ—Ç—ã',
            'full': '–ü–æ–ª–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞'
        }
        return names.get(export_type, export_type)

    async def _assign_potential_to_task(self, query, data):
        """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∫ –∑–∞–¥–∞–Ω–∏—é"""
        report_id, task_id = data.split('_')[2:]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, title, description, link, is_open, week_number, deadline, open_date
                FROM tasks WHERE id = ?
            ''', (task_id,))
            task = cursor.fetchone()
        
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        task_id, title, description, link, is_open, week_number, deadline, open_date = task
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º –æ—Ç—á–µ—Ç–µ
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, user_id, message_data, message_type, received_date
                FROM offline_messages WHERE id = ?
            ''', (report_id,))
            potential_report = cursor.fetchone()
        
        if not potential_report:
            await query.edit_message_text("‚ùå –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        report_id, user_id, message_data, message_type, received_date = potential_report
        
        try:
            data_dict = json.loads(message_data)
            content = data_dict.get('content', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ')
            msg_type = data_dict.get('type', 'text')
            file_id = data_dict.get('file_id')
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
            with self.db._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO submissions (user_id, task_id, submission_date, submission_type, content, file_id, status, is_on_time)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', (user_id, task_id, datetime.now(self.moscow_tz).isoformat(), 'text', content, file_id, 'pending', True))
                submission_id = cursor.lastrowid
                conn.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            with self.db._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE offline_messages SET processed = TRUE WHERE id = ?
                ''', (report_id,))
                conn.commit()
            
            await query.answer("‚úÖ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–¥–∞–Ω–∏—é!")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π
            await self._show_tasks_list(query)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞!")

    async def _mark_potential_processed(self, query, data):
        """–û—Ç–º–µ—á–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"""
        report_id = int(data.split('_')[1])  # mark_processed_123
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE offline_messages SET processed = TRUE WHERE id = ?
            ''', (report_id,))
            conn.commit()
        
        await query.answer("‚úÖ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π
        await self._show_tasks_list(query)

    async def _delete_potential_report(self, query, data):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        report_id = int(data.split('_')[1])  # delete_potential_123
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º –æ—Ç—á–µ—Ç–µ
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, user_id, message_data, message_type, received_date
                FROM offline_messages WHERE id = ?
            ''', (report_id,))
            potential_report = cursor.fetchone()
        
        if not potential_report:
            await query.edit_message_text("‚ùå –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        report_id, user_id, message_data, message_type, received_date = potential_report
        
        try:
            # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            with self.db._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    DELETE FROM offline_messages WHERE id = ?
                ''', (report_id,))
                conn.commit()
            
            await query.answer("‚úÖ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —É–¥–∞–ª–µ–Ω!")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π
            await self._show_tasks_list(query)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞!")

    async def _show_potential_file(self, query, data):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report_id = int(data.split('_')[3])  # show_potential_file_123
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º –æ—Ç—á–µ—Ç–µ –∏–∑ offline_messages
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_id, message_data
                FROM offline_messages WHERE id = ?
            ''', (report_id,))
            result = cursor.fetchone()
        
        if not result:
            await query.answer("‚ùå –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        user_id, message_data = result
        
        try:
            data_dict = json.loads(message_data)
            file_id = data_dict.get('file_id')
            file_path = data_dict.get('file_path')  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
            content = data_dict.get('content', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ')
            msg_type = data_dict.get('type', 'text')
            
            if not file_id and not file_path:
                await query.answer("‚ùå –ö —ç—Ç–æ–º—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º—É –æ—Ç—á–µ—Ç—É –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            with self.db._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT first_name, last_name FROM users WHERE user_id = ?', (user_id,))
                user_info = cursor.fetchone()
            
            user_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            if user_info:
                user_name = f"{user_info[0] or ''} {user_info[1] or ''}".strip() or f"ID{user_id}"
            
            caption = f"üìÅ **–§–∞–π–ª –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞**\n\nüë§ **–û—Ç:** {user_name}\n\nüí¨ **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:** {content[:100]}{'...' if len(content) > 100 else ''}"
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –ø–æ—Ç–æ–º file_id
            if file_path:
                success = await self._send_local_file(query, file_path, caption)
                if success:
                    return
            
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É —Å file_id
            if file_id:
                try:
                    if msg_type == 'photo':
                        await query.message.reply_photo(
                            photo=file_id,
                            caption=caption,
                            parse_mode='Markdown'
                        )
                    elif msg_type == 'video':
                        await query.message.reply_video(
                            video=file_id,
                            caption=caption,
                            parse_mode='Markdown'
                        )
                    elif msg_type == 'document':
                        await query.message.reply_document(
                            document=file_id,
                            caption=caption,
                            parse_mode='Markdown'
                        )
                    else:
                        await query.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞!")
                        return
                        
                    await query.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—á–µ—Ä–µ–∑ file_id)!")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file_id}: {e}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ Telegram
                    error_message = str(e).lower()
                    if "wrong file identifier" in error_message or "file not found" in error_message:
                        await query.answer("‚ùå –§–∞–π–ª –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—É—Å—Ç–∞—Ä–µ–ª file_id)")
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ
                        await query.message.reply_text(
                            "‚ö†Ô∏è *–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω*\n\n"
                            f"–§–∞–π–ª –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ ‚Ññ{report_id} –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω\\.\n"
                            "–≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–≥–¥–∞ file\\_id —É—Å—Ç–∞—Ä–µ–≤–∞–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ Telegram\\.\n\n"
                            "üí° *–†–µ—à–µ–Ω–∏–µ:* –§–∞–π–ª –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.",
                            parse_mode='MarkdownV2'
                        )
                    else:
                        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞!")
            else:
                await query.answer("‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                
        except json.JSONDecodeError:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

    async def _start_edit_open_date(self, update, context):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        task_id = int(data.split('_')[3])  # edit_open_date_123
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['editing_task_id'] = task_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT open_date FROM tasks WHERE id = ?', (task_id,))
            task = cursor.fetchone()
        
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return ConversationHandler.END
        
        current_open_date = task[0]
        if current_open_date:
            open_date_dt = datetime.fromisoformat(current_open_date)
            current_open_date_str = open_date_dt.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö')
        else:
            current_open_date_str = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
        text = (
            f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞–Ω–∏—è #{task_id}**\n\n"
            f"üìÖ **–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è:** {current_open_date_str}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞–Ω–∏—è:\n\n"
            "üìã **–í–∞—Ä–∏–∞–Ω—Ç—ã –≤–≤–æ–¥–∞:**\n"
            "‚Ä¢ `—Å–µ–π—á–∞—Å` - –æ—Ç–∫—Ä—ã—Ç—å —Å–µ–π—á–∞—Å\n"
            "‚Ä¢ `–∑–∞–≤—Ç—Ä–∞` - –∑–∞–≤—Ç—Ä–∞ –≤ 09:00\n"
            "‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì` - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ –≤ 09:00\n"
            "‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú` - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n"
            "‚Ä¢ `–Ω–µ–¥–µ–ª—è` - —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤ 09:00\n\n"
            "üí° _–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ_ `/cancel`"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"task_{task_id}")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_state'] = EDITING_TASK_OPEN_DATE

    async def handle_edit_open_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        if not await self._check_admin_access(update):
            return
        
        open_date_input = update.message.text.strip().lower()
        task_id = context.user_data.get('editing_task_id')
        
        if not task_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            context.user_data.clear()
            return
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–≤–æ–¥–∞
            if open_date_input in ['—Å–µ–π—á–∞—Å', 'now']:
                new_open_date = datetime.now(self.moscow_tz)
            elif open_date_input in ['–∑–∞–≤—Ç—Ä–∞', 'tomorrow']:
                new_open_date = datetime.now(self.moscow_tz) + timedelta(days=1)
                new_open_date = new_open_date.replace(hour=9, minute=0, second=0, microsecond=0)
            elif open_date_input in ['–Ω–µ–¥–µ–ª—è', 'week']:
                new_open_date = datetime.now(self.moscow_tz) + timedelta(weeks=1)
                new_open_date = new_open_date.replace(hour=9, minute=0, second=0, microsecond=0)
            else:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                try:
                    if ' ' in open_date_input:
                        # –§–æ—Ä–º–∞—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º
                        new_open_date = datetime.strptime(open_date_input, '%d.%m.%Y %H:%M')
                    else:
                        # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞, –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 09:00
                        new_open_date = datetime.strptime(open_date_input, '%d.%m.%Y')
                        new_open_date = new_open_date.replace(hour=9, minute=0)
                    
                    new_open_date = self.moscow_tz.localize(new_open_date)
                except ValueError:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º (—Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
                if new_open_date < datetime.now(self.moscow_tz):
                    await update.message.reply_text(
                        "‚ùå **–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –ø—Ä–æ—à–ª–æ–º**\n\n"
                        "–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º –∏–ª–∏ —Å–µ–π—á–∞—Å.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                    )
                    return
                    
        except ValueError as e:
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 09:00)\n"
                "‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì` (–≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 09:00)\n"
                "‚Ä¢ `—Å–µ–π—á–∞—Å` - –æ—Ç–∫—Ä—ã—Ç—å —Å–µ–π—á–∞—Å\n"
                "‚Ä¢ `–∑–∞–≤—Ç—Ä–∞` - –∑–∞–≤—Ç—Ä–∞ –≤ 09:00\n"
                "‚Ä¢ `–Ω–µ–¥–µ–ª—è` - —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤ 09:00"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å is_open –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–≤–æ–π –¥–∞—Ç—ã
            is_open = new_open_date <= datetime.now(self.moscow_tz)
            
            with self.db._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    'UPDATE tasks SET open_date = ?, is_open = ? WHERE id = ?', 
                    (new_open_date.isoformat(), is_open, task_id)
                )
                conn.commit()
            
            keyboard = [
                [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—é", callback_data=f"task_{task_id}")],
                [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="list_tasks")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            status_text = "–æ—Ç–∫—Ä—ã—Ç–æ" if is_open else "–æ–∂–∏–¥–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è"
            
            await update.message.reply_text(
                f"‚úÖ **–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!**\n\n"
                f"üìÖ **–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è:** {new_open_date.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö')}\n"
                f"üìä **–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è:** {status_text}",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è: {str(e)}"
            )

    async def _start_edit_deadline(self, update, context):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        task_id = int(data.split('_')[2])  # edit_deadline_123
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['editing_task_id'] = task_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT deadline, open_date FROM tasks WHERE id = ?', (task_id,))
            task = cursor.fetchone()
            
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return ConversationHandler.END
        
        current_deadline, open_date = task
        if current_deadline:
            deadline_dt = datetime.fromisoformat(current_deadline)
            current_deadline_str = deadline_dt.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö')
        else:
            current_deadline_str = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–¥–ª–∞–π–Ω
        if open_date:
            open_date_dt = datetime.fromisoformat(open_date)
            suggested_deadline = open_date_dt + timedelta(days=7)
            suggested_deadline = suggested_deadline.replace(hour=23, minute=59, second=59)
            suggested_str = suggested_deadline.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö')
        else:
            suggested_deadline = datetime.now(self.moscow_tz) + timedelta(days=7)
            suggested_deadline = suggested_deadline.replace(hour=23, minute=59, second=59)
            suggested_str = suggested_deadline.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö')
        
        text = (
            f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞–Ω–∏—è #{task_id}**\n\n"
            f"‚è∞ **–¢–µ–∫—É—â–∏–π –¥–µ–¥–ª–∞–π–Ω:** {current_deadline_str}\n"
            f"üí° **–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –¥–µ–¥–ª–∞–π–Ω:** {suggested_str}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞–Ω–∏—è:\n\n"
            "üìã **–í–∞—Ä–∏–∞–Ω—Ç—ã –≤–≤–æ–¥–∞:**\n"
            "‚Ä¢ `–∞–≤—Ç–æ` - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç (—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é)\n"
            "‚Ä¢ `–∑–∞–≤—Ç—Ä–∞` - –∑–∞–≤—Ç—Ä–∞ –≤ 23:59\n"
            "‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì` - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ –≤ 23:59\n"
            "‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú` - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n"
            "‚Ä¢ `–Ω–µ–¥–µ–ª—è` - —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤ 23:59\n"
            "‚Ä¢ `–Ω–µ—Ç` - —É–±—Ä–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω\n\n"
            "üí° _–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ_ `/cancel`"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"task_{task_id}")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_state'] = EDITING_TASK_DEADLINE

    async def handle_edit_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞–Ω–∏—è"""
        if not await self._check_admin_access(update):
            return
        
        deadline_input = update.message.text.strip().lower()
        task_id = context.user_data.get('editing_task_id')
        
        if not task_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            context.user_data.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        with self.db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT open_date FROM tasks WHERE id = ?', (task_id,))
            result = cursor.fetchone()
            open_date = result[0] if result else None
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–≤–æ–¥–∞ –¥–µ–¥–ª–∞–π–Ω–∞
            if deadline_input in ['–∞–≤—Ç–æ', 'auto']:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–¥–ª–∞–π–Ω: —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
                if open_date:
                    open_date_dt = datetime.fromisoformat(open_date)
                    new_deadline = open_date_dt + timedelta(days=7)
                else:
                    new_deadline = datetime.now(self.moscow_tz) + timedelta(days=7)
                new_deadline = new_deadline.replace(hour=23, minute=59, second=59)
            elif deadline_input in ['–∑–∞–≤—Ç—Ä–∞', 'tomorrow']:
                new_deadline = datetime.now(self.moscow_tz).replace(hour=23, minute=59, second=59) + timedelta(days=1)
            elif deadline_input in ['–Ω–µ–¥–µ–ª—è', 'week']:
                new_deadline = datetime.now(self.moscow_tz) + timedelta(weeks=1)
                new_deadline = new_deadline.replace(hour=23, minute=59, second=59)
            elif deadline_input in ['–Ω–µ—Ç', 'no', '-']:
                new_deadline = None
            else:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                try:
                    if ' ' in deadline_input:
                        new_deadline = datetime.strptime(deadline_input, '%d.%m.%Y %H:%M')
                    else:
                        new_deadline = datetime.strptime(deadline_input, '%d.%m.%Y')
                        new_deadline = new_deadline.replace(hour=23, minute=59)
                    
                    new_deadline = self.moscow_tz.localize(new_deadline)
                except ValueError:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –≤ –±—É–¥—É—â–µ–º
                if new_deadline and new_deadline <= datetime.now(self.moscow_tz):
                    await update.message.reply_text(
                        "‚ùå **–î–µ–¥–ª–∞–π–Ω –≤ –ø—Ä–æ—à–ª–æ–º**\n\n"
                        "–î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                    )
                    return
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –Ω–µ —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è
                if new_deadline and open_date:
                    open_date_dt = datetime.fromisoformat(open_date)
                    if new_deadline <= open_date_dt:
                        await update.message.reply_text(
                            "‚ùå **–î–µ–¥–ª–∞–π–Ω —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è**\n\n"
                            "–î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞–Ω–∏—è.\n"
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                        )
                        return
                    
        except ValueError as e:
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 23:59)\n"
                "‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì` (–≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 23:59)\n"
                "‚Ä¢ `–∞–≤—Ç–æ` - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç\n"
                "‚Ä¢ `–∑–∞–≤—Ç—Ä–∞` - –∑–∞–≤—Ç—Ä–∞ –≤ 23:59\n"
                "‚Ä¢ `–Ω–µ–¥–µ–ª—è` - —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é\n"
                "‚Ä¢ `–Ω–µ—Ç` - –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            with self.db._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    'UPDATE tasks SET deadline = ? WHERE id = ?', 
                    (new_deadline.isoformat() if new_deadline else None, task_id)
                )
                conn.commit()
            
            keyboard = [
                [InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—é", callback_data=f"task_{task_id}")],
                [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="list_tasks")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            deadline_text = new_deadline.strftime('%d.%m.%Y –≤ %H:%M –ú–°–ö') if new_deadline else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            await update.message.reply_text(
                f"‚úÖ **–î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!**\n\n"
                f"‚è∞ **–ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω:** {deadline_text}",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞–Ω–∏—è: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞: {str(e)}"
            )

    async def handle_edit_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π"""
        if not await self._check_admin_access(update):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        editing_state = context.user_data.get('editing_state')
        
        if editing_state == EDITING_TASK_TITLE:
            await self.handle_edit_title(update, context)
        elif editing_state == EDITING_TASK_DESCRIPTION:
            await self.handle_edit_description(update, context)
        elif editing_state == EDITING_TASK_LINK:
            await self.handle_edit_link(update, context)
        elif editing_state == EDITING_TASK_OPEN_DATE:
            await self.handle_edit_open_date(update, context)
        elif editing_state == EDITING_TASK_DEADLINE:
            await self.handle_edit_deadline(update, context)
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    async def cancel_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"""
        if not await self._check_admin_access(update):
            return ConversationHandler.END
            
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        
        keyboard = [
            [InlineKeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="tasks_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await update.message.reply_text(
            "‚ùå **–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ConversationHandler.END

# –†–∞—Å—à–∏—Ä—è–µ–º –∫–ª–∞—Å—Å Database –º–µ—Ç–æ–¥–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
def add_connection_method():
    def _get_connection(self):
        import sqlite3
        return sqlite3.connect(self.db_path)
    
    Database._get_connection = _get_connection

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
add_connection_method()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω-–±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    token = os.getenv('ADMIN_BOT_TOKEN')
    if not token:
        logger.error("ADMIN_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        logger.info("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å ADMIN_BOT_TOKEN=your_admin_bot_token")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_ids_env = os.getenv('ADMIN_IDS', os.getenv('ADMIN_ID', ''))
    if not admin_ids_env:
        logger.error("ADMIN_IDS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        logger.info("–î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª: ADMIN_IDS=your_admin_telegram_id")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–µ–∂–∏–º –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    if admin_ids_env.strip().lower() == 'all':
        logger.warning("‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–ï–ñ–ò–ú –û–¢–ö–†–´–¢–û–ì–û –î–û–°–¢–£–ü–ê! ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è")
        logger.warning("–ê–¥–º–∏–Ω-–±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Telegram!")
        logger.warning("–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!")
        logger.warning("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        try:
            admin_ids = [int(aid.strip()) for aid in admin_ids_env.split(',') if aid.strip()]
            if not admin_ids:
                raise ValueError("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        except ValueError:
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ADMIN_IDS –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            logger.info("–§–æ—Ä–º–∞—Ç: ADMIN_IDS=123456789,987654321 –∏–ª–∏ ADMIN_IDS=all")
            return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    admin_bot = AdminBot()
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
    add_task_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(admin_bot._start_add_task_conversation, pattern="^create_manual$")
        ],
        states={
            ADDING_TASK_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_bot.handle_add_task_title)],
            ADDING_TASK_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_bot.handle_add_task_description)],
            ADDING_TASK_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_bot.handle_add_task_link)],
            ADDING_TASK_OPEN_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_bot.handle_add_task_open_date)],
            ADDING_TASK_DEADLINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_bot.handle_add_task_deadline)],
        },
        fallbacks=[CommandHandler("cancel", admin_bot.cancel_conversation)],
        name="add_task",
        per_message=True
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
    edit_message_handler = MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        admin_bot.handle_edit_message
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", admin_bot.start_command))
    application.add_handler(add_task_handler)
    application.add_handler(CallbackQueryHandler(admin_bot.handle_callback))
    application.add_handler(edit_message_handler)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    async def set_commands(app):
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        ]
        await app.bot.set_my_commands(commands)
    
    application.post_init = set_commands
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üîß –ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    logger.info("üìä –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≠–∫–æ-–±–æ—Ç–æ–º –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    logger.info("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        application.run_polling()
    except KeyboardInterrupt:
        logger.info("üõë –ê–¥–º–∏–Ω-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–¥–º–∏–Ω-–±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main() 